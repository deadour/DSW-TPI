
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model producto
 * 
 */
export type producto = {
  id: number
  nombre: string
  stock: number
  precio: Prisma.Decimal
  categoria: string | null
  fechaActualizacion: Date | null
}

/**
 * Model compra
 * 
 */
export type compra = {
  id: number
  fecha: Date
  proveedor: string | null
}

/**
 * Model lineaCompra
 * 
 */
export type lineaCompra = {
  idCompra: number
  linea: number
  idProducto: number
  cantidad: number
  precioUnitario: Prisma.Decimal
}

/**
 * Model venta
 * 
 */
export type venta = {
  id: number
  fecha: Date
  cliente: string | null
}

/**
 * Model lineaVenta
 * 
 */
export type lineaVenta = {
  idVenta: number
  linea: number
  idProducto: number
  cantidad: number
  precioUnitario: Prisma.Decimal
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Productos
 * const productos = await prisma.producto.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Productos
   * const productos = await prisma.producto.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.producto`: Exposes CRUD operations for the **producto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productos
    * const productos = await prisma.producto.findMany()
    * ```
    */
  get producto(): Prisma.productoDelegate<GlobalReject>;

  /**
   * `prisma.compra`: Exposes CRUD operations for the **compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compra.findMany()
    * ```
    */
  get compra(): Prisma.compraDelegate<GlobalReject>;

  /**
   * `prisma.lineaCompra`: Exposes CRUD operations for the **lineaCompra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LineaCompras
    * const lineaCompras = await prisma.lineaCompra.findMany()
    * ```
    */
  get lineaCompra(): Prisma.lineaCompraDelegate<GlobalReject>;

  /**
   * `prisma.venta`: Exposes CRUD operations for the **venta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ventas
    * const ventas = await prisma.venta.findMany()
    * ```
    */
  get venta(): Prisma.ventaDelegate<GlobalReject>;

  /**
   * `prisma.lineaVenta`: Exposes CRUD operations for the **lineaVenta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LineaVentas
    * const lineaVentas = await prisma.lineaVenta.findMany()
    * ```
    */
  get lineaVenta(): Prisma.lineaVentaDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    producto: 'producto',
    compra: 'compra',
    lineaCompra: 'lineaCompra',
    venta: 'venta',
    lineaVenta: 'lineaVenta'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProductoCountOutputType
   */


  export type ProductoCountOutputType = {
    lineasCompra: number
    LineasVenta: number
  }

  export type ProductoCountOutputTypeSelect = {
    lineasCompra?: boolean
    LineasVenta?: boolean
  }

  export type ProductoCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductoCountOutputTypeArgs)
    ? ProductoCountOutputType 
    : S extends { select: any } & (ProductoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductoCountOutputType ? ProductoCountOutputType[P] : never
  } 
      : ProductoCountOutputType




  // Custom InputTypes

  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductoCountOutputType
     */
    select?: ProductoCountOutputTypeSelect | null
  }



  /**
   * Count Type CompraCountOutputType
   */


  export type CompraCountOutputType = {
    lineas: number
  }

  export type CompraCountOutputTypeSelect = {
    lineas?: boolean
  }

  export type CompraCountOutputTypeGetPayload<S extends boolean | null | undefined | CompraCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompraCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CompraCountOutputTypeArgs)
    ? CompraCountOutputType 
    : S extends { select: any } & (CompraCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CompraCountOutputType ? CompraCountOutputType[P] : never
  } 
      : CompraCountOutputType




  // Custom InputTypes

  /**
   * CompraCountOutputType without action
   */
  export type CompraCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompraCountOutputType
     */
    select?: CompraCountOutputTypeSelect | null
  }



  /**
   * Count Type VentaCountOutputType
   */


  export type VentaCountOutputType = {
    lineas: number
  }

  export type VentaCountOutputTypeSelect = {
    lineas?: boolean
  }

  export type VentaCountOutputTypeGetPayload<S extends boolean | null | undefined | VentaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? VentaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (VentaCountOutputTypeArgs)
    ? VentaCountOutputType 
    : S extends { select: any } & (VentaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof VentaCountOutputType ? VentaCountOutputType[P] : never
  } 
      : VentaCountOutputType




  // Custom InputTypes

  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VentaCountOutputType
     */
    select?: VentaCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model producto
   */


  export type AggregateProducto = {
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  export type ProductoAvgAggregateOutputType = {
    id: number | null
    stock: number | null
    precio: Decimal | null
  }

  export type ProductoSumAggregateOutputType = {
    id: number | null
    stock: number | null
    precio: Decimal | null
  }

  export type ProductoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    stock: number | null
    precio: Decimal | null
    categoria: string | null
    fechaActualizacion: Date | null
  }

  export type ProductoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    stock: number | null
    precio: Decimal | null
    categoria: string | null
    fechaActualizacion: Date | null
  }

  export type ProductoCountAggregateOutputType = {
    id: number
    nombre: number
    stock: number
    precio: number
    categoria: number
    fechaActualizacion: number
    _all: number
  }


  export type ProductoAvgAggregateInputType = {
    id?: true
    stock?: true
    precio?: true
  }

  export type ProductoSumAggregateInputType = {
    id?: true
    stock?: true
    precio?: true
  }

  export type ProductoMinAggregateInputType = {
    id?: true
    nombre?: true
    stock?: true
    precio?: true
    categoria?: true
    fechaActualizacion?: true
  }

  export type ProductoMaxAggregateInputType = {
    id?: true
    nombre?: true
    stock?: true
    precio?: true
    categoria?: true
    fechaActualizacion?: true
  }

  export type ProductoCountAggregateInputType = {
    id?: true
    nombre?: true
    stock?: true
    precio?: true
    categoria?: true
    fechaActualizacion?: true
    _all?: true
  }

  export type ProductoAggregateArgs = {
    /**
     * Filter which producto to aggregate.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: Enumerable<productoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productos
    **/
    _count?: true | ProductoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductoMaxAggregateInputType
  }

  export type GetProductoAggregateType<T extends ProductoAggregateArgs> = {
        [P in keyof T & keyof AggregateProducto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducto[P]>
      : GetScalarType<T[P], AggregateProducto[P]>
  }




  export type ProductoGroupByArgs = {
    where?: productoWhereInput
    orderBy?: Enumerable<productoOrderByWithAggregationInput>
    by: ProductoScalarFieldEnum[]
    having?: productoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductoCountAggregateInputType | true
    _avg?: ProductoAvgAggregateInputType
    _sum?: ProductoSumAggregateInputType
    _min?: ProductoMinAggregateInputType
    _max?: ProductoMaxAggregateInputType
  }


  export type ProductoGroupByOutputType = {
    id: number
    nombre: string
    stock: number
    precio: Decimal
    categoria: string | null
    fechaActualizacion: Date | null
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  type GetProductoGroupByPayload<T extends ProductoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductoGroupByOutputType[P]>
            : GetScalarType<T[P], ProductoGroupByOutputType[P]>
        }
      >
    >


  export type productoSelect = {
    id?: boolean
    nombre?: boolean
    stock?: boolean
    precio?: boolean
    categoria?: boolean
    fechaActualizacion?: boolean
    lineasCompra?: boolean | producto$lineasCompraArgs
    LineasVenta?: boolean | producto$LineasVentaArgs
    _count?: boolean | ProductoCountOutputTypeArgs
  }


  export type productoInclude = {
    lineasCompra?: boolean | producto$lineasCompraArgs
    LineasVenta?: boolean | producto$LineasVentaArgs
    _count?: boolean | ProductoCountOutputTypeArgs
  }

  export type productoGetPayload<S extends boolean | null | undefined | productoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? producto :
    S extends undefined ? never :
    S extends { include: any } & (productoArgs | productoFindManyArgs)
    ? producto  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'lineasCompra' ? Array < lineaCompraGetPayload<S['include'][P]>>  :
        P extends 'LineasVenta' ? Array < lineaVentaGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (productoArgs | productoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'lineasCompra' ? Array < lineaCompraGetPayload<S['select'][P]>>  :
        P extends 'LineasVenta' ? Array < lineaVentaGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof producto ? producto[P] : never
  } 
      : producto


  type productoCountArgs = 
    Omit<productoFindManyArgs, 'select' | 'include'> & {
      select?: ProductoCountAggregateInputType | true
    }

  export interface productoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Producto that matches the filter.
     * @param {productoFindUniqueArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'producto'> extends True ? Prisma__productoClient<productoGetPayload<T>> : Prisma__productoClient<productoGetPayload<T> | null, null>

    /**
     * Find one Producto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productoFindUniqueOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, productoFindUniqueOrThrowArgs>
    ): Prisma__productoClient<productoGetPayload<T>>

    /**
     * Find the first Producto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoFindFirstArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'producto'> extends True ? Prisma__productoClient<productoGetPayload<T>> : Prisma__productoClient<productoGetPayload<T> | null, null>

    /**
     * Find the first Producto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoFindFirstOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, productoFindFirstOrThrowArgs>
    ): Prisma__productoClient<productoGetPayload<T>>

    /**
     * Find zero or more Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productos
     * const productos = await prisma.producto.findMany()
     * 
     * // Get first 10 Productos
     * const productos = await prisma.producto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productoWithIdOnly = await prisma.producto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productoFindManyArgs>(
      args?: SelectSubset<T, productoFindManyArgs>
    ): Prisma.PrismaPromise<Array<productoGetPayload<T>>>

    /**
     * Create a Producto.
     * @param {productoCreateArgs} args - Arguments to create a Producto.
     * @example
     * // Create one Producto
     * const Producto = await prisma.producto.create({
     *   data: {
     *     // ... data to create a Producto
     *   }
     * })
     * 
    **/
    create<T extends productoCreateArgs>(
      args: SelectSubset<T, productoCreateArgs>
    ): Prisma__productoClient<productoGetPayload<T>>

    /**
     * Create many Productos.
     *     @param {productoCreateManyArgs} args - Arguments to create many Productos.
     *     @example
     *     // Create many Productos
     *     const producto = await prisma.producto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productoCreateManyArgs>(
      args?: SelectSubset<T, productoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Producto.
     * @param {productoDeleteArgs} args - Arguments to delete one Producto.
     * @example
     * // Delete one Producto
     * const Producto = await prisma.producto.delete({
     *   where: {
     *     // ... filter to delete one Producto
     *   }
     * })
     * 
    **/
    delete<T extends productoDeleteArgs>(
      args: SelectSubset<T, productoDeleteArgs>
    ): Prisma__productoClient<productoGetPayload<T>>

    /**
     * Update one Producto.
     * @param {productoUpdateArgs} args - Arguments to update one Producto.
     * @example
     * // Update one Producto
     * const producto = await prisma.producto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productoUpdateArgs>(
      args: SelectSubset<T, productoUpdateArgs>
    ): Prisma__productoClient<productoGetPayload<T>>

    /**
     * Delete zero or more Productos.
     * @param {productoDeleteManyArgs} args - Arguments to filter Productos to delete.
     * @example
     * // Delete a few Productos
     * const { count } = await prisma.producto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productoDeleteManyArgs>(
      args?: SelectSubset<T, productoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productos
     * const producto = await prisma.producto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productoUpdateManyArgs>(
      args: SelectSubset<T, productoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Producto.
     * @param {productoUpsertArgs} args - Arguments to update or create a Producto.
     * @example
     * // Update or create a Producto
     * const producto = await prisma.producto.upsert({
     *   create: {
     *     // ... data to create a Producto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Producto we want to update
     *   }
     * })
    **/
    upsert<T extends productoUpsertArgs>(
      args: SelectSubset<T, productoUpsertArgs>
    ): Prisma__productoClient<productoGetPayload<T>>

    /**
     * Count the number of Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoCountArgs} args - Arguments to filter Productos to count.
     * @example
     * // Count the number of Productos
     * const count = await prisma.producto.count({
     *   where: {
     *     // ... the filter for the Productos we want to count
     *   }
     * })
    **/
    count<T extends productoCountArgs>(
      args?: Subset<T, productoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductoAggregateArgs>(args: Subset<T, ProductoAggregateArgs>): Prisma.PrismaPromise<GetProductoAggregateType<T>>

    /**
     * Group by Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductoGroupByArgs['orderBy'] }
        : { orderBy?: ProductoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for producto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    lineasCompra<T extends producto$lineasCompraArgs= {}>(args?: Subset<T, producto$lineasCompraArgs>): Prisma.PrismaPromise<Array<lineaCompraGetPayload<T>>| Null>;

    LineasVenta<T extends producto$LineasVentaArgs= {}>(args?: Subset<T, producto$LineasVentaArgs>): Prisma.PrismaPromise<Array<lineaVentaGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * producto base type for findUnique actions
   */
  export type productoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
    /**
     * Filter, which producto to fetch.
     */
    where: productoWhereUniqueInput
  }

  /**
   * producto findUnique
   */
  export interface productoFindUniqueArgs extends productoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * producto findUniqueOrThrow
   */
  export type productoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
    /**
     * Filter, which producto to fetch.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto base type for findFirst actions
   */
  export type productoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
    /**
     * Filter, which producto to fetch.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: Enumerable<productoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productos.
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productos.
     */
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }

  /**
   * producto findFirst
   */
  export interface productoFindFirstArgs extends productoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * producto findFirstOrThrow
   */
  export type productoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
    /**
     * Filter, which producto to fetch.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: Enumerable<productoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productos.
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productos.
     */
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }


  /**
   * producto findMany
   */
  export type productoFindManyArgs = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
    /**
     * Filter, which productos to fetch.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: Enumerable<productoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productos.
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }


  /**
   * producto create
   */
  export type productoCreateArgs = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
    /**
     * The data needed to create a producto.
     */
    data: XOR<productoCreateInput, productoUncheckedCreateInput>
  }


  /**
   * producto createMany
   */
  export type productoCreateManyArgs = {
    /**
     * The data used to create many productos.
     */
    data: Enumerable<productoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * producto update
   */
  export type productoUpdateArgs = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
    /**
     * The data needed to update a producto.
     */
    data: XOR<productoUpdateInput, productoUncheckedUpdateInput>
    /**
     * Choose, which producto to update.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto updateMany
   */
  export type productoUpdateManyArgs = {
    /**
     * The data used to update productos.
     */
    data: XOR<productoUpdateManyMutationInput, productoUncheckedUpdateManyInput>
    /**
     * Filter which productos to update
     */
    where?: productoWhereInput
  }


  /**
   * producto upsert
   */
  export type productoUpsertArgs = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
    /**
     * The filter to search for the producto to update in case it exists.
     */
    where: productoWhereUniqueInput
    /**
     * In case the producto found by the `where` argument doesn't exist, create a new producto with this data.
     */
    create: XOR<productoCreateInput, productoUncheckedCreateInput>
    /**
     * In case the producto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productoUpdateInput, productoUncheckedUpdateInput>
  }


  /**
   * producto delete
   */
  export type productoDeleteArgs = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
    /**
     * Filter which producto to delete.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto deleteMany
   */
  export type productoDeleteManyArgs = {
    /**
     * Filter which productos to delete
     */
    where?: productoWhereInput
  }


  /**
   * producto.lineasCompra
   */
  export type producto$lineasCompraArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    where?: lineaCompraWhereInput
    orderBy?: Enumerable<lineaCompraOrderByWithRelationInput>
    cursor?: lineaCompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LineaCompraScalarFieldEnum>
  }


  /**
   * producto.LineasVenta
   */
  export type producto$LineasVentaArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    where?: lineaVentaWhereInput
    orderBy?: Enumerable<lineaVentaOrderByWithRelationInput>
    cursor?: lineaVentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LineaVentaScalarFieldEnum>
  }


  /**
   * producto without action
   */
  export type productoArgs = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude | null
  }



  /**
   * Model compra
   */


  export type AggregateCompra = {
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  export type CompraAvgAggregateOutputType = {
    id: number | null
  }

  export type CompraSumAggregateOutputType = {
    id: number | null
  }

  export type CompraMinAggregateOutputType = {
    id: number | null
    fecha: Date | null
    proveedor: string | null
  }

  export type CompraMaxAggregateOutputType = {
    id: number | null
    fecha: Date | null
    proveedor: string | null
  }

  export type CompraCountAggregateOutputType = {
    id: number
    fecha: number
    proveedor: number
    _all: number
  }


  export type CompraAvgAggregateInputType = {
    id?: true
  }

  export type CompraSumAggregateInputType = {
    id?: true
  }

  export type CompraMinAggregateInputType = {
    id?: true
    fecha?: true
    proveedor?: true
  }

  export type CompraMaxAggregateInputType = {
    id?: true
    fecha?: true
    proveedor?: true
  }

  export type CompraCountAggregateInputType = {
    id?: true
    fecha?: true
    proveedor?: true
    _all?: true
  }

  export type CompraAggregateArgs = {
    /**
     * Filter which compra to aggregate.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: Enumerable<compraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned compras
    **/
    _count?: true | CompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraMaxAggregateInputType
  }

  export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
        [P in keyof T & keyof AggregateCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra[P]>
      : GetScalarType<T[P], AggregateCompra[P]>
  }




  export type CompraGroupByArgs = {
    where?: compraWhereInput
    orderBy?: Enumerable<compraOrderByWithAggregationInput>
    by: CompraScalarFieldEnum[]
    having?: compraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraCountAggregateInputType | true
    _avg?: CompraAvgAggregateInputType
    _sum?: CompraSumAggregateInputType
    _min?: CompraMinAggregateInputType
    _max?: CompraMaxAggregateInputType
  }


  export type CompraGroupByOutputType = {
    id: number
    fecha: Date
    proveedor: string | null
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  type GetCompraGroupByPayload<T extends CompraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraGroupByOutputType[P]>
            : GetScalarType<T[P], CompraGroupByOutputType[P]>
        }
      >
    >


  export type compraSelect = {
    id?: boolean
    fecha?: boolean
    proveedor?: boolean
    lineas?: boolean | compra$lineasArgs
    _count?: boolean | CompraCountOutputTypeArgs
  }


  export type compraInclude = {
    lineas?: boolean | compra$lineasArgs
    _count?: boolean | CompraCountOutputTypeArgs
  }

  export type compraGetPayload<S extends boolean | null | undefined | compraArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? compra :
    S extends undefined ? never :
    S extends { include: any } & (compraArgs | compraFindManyArgs)
    ? compra  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'lineas' ? Array < lineaCompraGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompraCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (compraArgs | compraFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'lineas' ? Array < lineaCompraGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompraCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof compra ? compra[P] : never
  } 
      : compra


  type compraCountArgs = 
    Omit<compraFindManyArgs, 'select' | 'include'> & {
      select?: CompraCountAggregateInputType | true
    }

  export interface compraDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Compra that matches the filter.
     * @param {compraFindUniqueArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends compraFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, compraFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'compra'> extends True ? Prisma__compraClient<compraGetPayload<T>> : Prisma__compraClient<compraGetPayload<T> | null, null>

    /**
     * Find one Compra that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {compraFindUniqueOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends compraFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, compraFindUniqueOrThrowArgs>
    ): Prisma__compraClient<compraGetPayload<T>>

    /**
     * Find the first Compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindFirstArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends compraFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, compraFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'compra'> extends True ? Prisma__compraClient<compraGetPayload<T>> : Prisma__compraClient<compraGetPayload<T> | null, null>

    /**
     * Find the first Compra that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindFirstOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends compraFindFirstOrThrowArgs>(
      args?: SelectSubset<T, compraFindFirstOrThrowArgs>
    ): Prisma__compraClient<compraGetPayload<T>>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compra.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraWithIdOnly = await prisma.compra.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends compraFindManyArgs>(
      args?: SelectSubset<T, compraFindManyArgs>
    ): Prisma.PrismaPromise<Array<compraGetPayload<T>>>

    /**
     * Create a Compra.
     * @param {compraCreateArgs} args - Arguments to create a Compra.
     * @example
     * // Create one Compra
     * const Compra = await prisma.compra.create({
     *   data: {
     *     // ... data to create a Compra
     *   }
     * })
     * 
    **/
    create<T extends compraCreateArgs>(
      args: SelectSubset<T, compraCreateArgs>
    ): Prisma__compraClient<compraGetPayload<T>>

    /**
     * Create many Compras.
     *     @param {compraCreateManyArgs} args - Arguments to create many Compras.
     *     @example
     *     // Create many Compras
     *     const compra = await prisma.compra.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends compraCreateManyArgs>(
      args?: SelectSubset<T, compraCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Compra.
     * @param {compraDeleteArgs} args - Arguments to delete one Compra.
     * @example
     * // Delete one Compra
     * const Compra = await prisma.compra.delete({
     *   where: {
     *     // ... filter to delete one Compra
     *   }
     * })
     * 
    **/
    delete<T extends compraDeleteArgs>(
      args: SelectSubset<T, compraDeleteArgs>
    ): Prisma__compraClient<compraGetPayload<T>>

    /**
     * Update one Compra.
     * @param {compraUpdateArgs} args - Arguments to update one Compra.
     * @example
     * // Update one Compra
     * const compra = await prisma.compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends compraUpdateArgs>(
      args: SelectSubset<T, compraUpdateArgs>
    ): Prisma__compraClient<compraGetPayload<T>>

    /**
     * Delete zero or more Compras.
     * @param {compraDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends compraDeleteManyArgs>(
      args?: SelectSubset<T, compraDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends compraUpdateManyArgs>(
      args: SelectSubset<T, compraUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra.
     * @param {compraUpsertArgs} args - Arguments to update or create a Compra.
     * @example
     * // Update or create a Compra
     * const compra = await prisma.compra.upsert({
     *   create: {
     *     // ... data to create a Compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra we want to update
     *   }
     * })
    **/
    upsert<T extends compraUpsertArgs>(
      args: SelectSubset<T, compraUpsertArgs>
    ): Prisma__compraClient<compraGetPayload<T>>

    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compra.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends compraCountArgs>(
      args?: Subset<T, compraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraAggregateArgs>(args: Subset<T, CompraAggregateArgs>): Prisma.PrismaPromise<GetCompraAggregateType<T>>

    /**
     * Group by Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraGroupByArgs['orderBy'] }
        : { orderBy?: CompraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__compraClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    lineas<T extends compra$lineasArgs= {}>(args?: Subset<T, compra$lineasArgs>): Prisma.PrismaPromise<Array<lineaCompraGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * compra base type for findUnique actions
   */
  export type compraFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
    /**
     * Filter, which compra to fetch.
     */
    where: compraWhereUniqueInput
  }

  /**
   * compra findUnique
   */
  export interface compraFindUniqueArgs extends compraFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * compra findUniqueOrThrow
   */
  export type compraFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
    /**
     * Filter, which compra to fetch.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra base type for findFirst actions
   */
  export type compraFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
    /**
     * Filter, which compra to fetch.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: Enumerable<compraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compras.
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compras.
     */
    distinct?: Enumerable<CompraScalarFieldEnum>
  }

  /**
   * compra findFirst
   */
  export interface compraFindFirstArgs extends compraFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * compra findFirstOrThrow
   */
  export type compraFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
    /**
     * Filter, which compra to fetch.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: Enumerable<compraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compras.
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compras.
     */
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * compra findMany
   */
  export type compraFindManyArgs = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
    /**
     * Filter, which compras to fetch.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: Enumerable<compraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing compras.
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * compra create
   */
  export type compraCreateArgs = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
    /**
     * The data needed to create a compra.
     */
    data: XOR<compraCreateInput, compraUncheckedCreateInput>
  }


  /**
   * compra createMany
   */
  export type compraCreateManyArgs = {
    /**
     * The data used to create many compras.
     */
    data: Enumerable<compraCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * compra update
   */
  export type compraUpdateArgs = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
    /**
     * The data needed to update a compra.
     */
    data: XOR<compraUpdateInput, compraUncheckedUpdateInput>
    /**
     * Choose, which compra to update.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra updateMany
   */
  export type compraUpdateManyArgs = {
    /**
     * The data used to update compras.
     */
    data: XOR<compraUpdateManyMutationInput, compraUncheckedUpdateManyInput>
    /**
     * Filter which compras to update
     */
    where?: compraWhereInput
  }


  /**
   * compra upsert
   */
  export type compraUpsertArgs = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
    /**
     * The filter to search for the compra to update in case it exists.
     */
    where: compraWhereUniqueInput
    /**
     * In case the compra found by the `where` argument doesn't exist, create a new compra with this data.
     */
    create: XOR<compraCreateInput, compraUncheckedCreateInput>
    /**
     * In case the compra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<compraUpdateInput, compraUncheckedUpdateInput>
  }


  /**
   * compra delete
   */
  export type compraDeleteArgs = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
    /**
     * Filter which compra to delete.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra deleteMany
   */
  export type compraDeleteManyArgs = {
    /**
     * Filter which compras to delete
     */
    where?: compraWhereInput
  }


  /**
   * compra.lineas
   */
  export type compra$lineasArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    where?: lineaCompraWhereInput
    orderBy?: Enumerable<lineaCompraOrderByWithRelationInput>
    cursor?: lineaCompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LineaCompraScalarFieldEnum>
  }


  /**
   * compra without action
   */
  export type compraArgs = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude | null
  }



  /**
   * Model lineaCompra
   */


  export type AggregateLineaCompra = {
    _count: LineaCompraCountAggregateOutputType | null
    _avg: LineaCompraAvgAggregateOutputType | null
    _sum: LineaCompraSumAggregateOutputType | null
    _min: LineaCompraMinAggregateOutputType | null
    _max: LineaCompraMaxAggregateOutputType | null
  }

  export type LineaCompraAvgAggregateOutputType = {
    idCompra: number | null
    linea: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type LineaCompraSumAggregateOutputType = {
    idCompra: number | null
    linea: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type LineaCompraMinAggregateOutputType = {
    idCompra: number | null
    linea: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type LineaCompraMaxAggregateOutputType = {
    idCompra: number | null
    linea: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type LineaCompraCountAggregateOutputType = {
    idCompra: number
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: number
    _all: number
  }


  export type LineaCompraAvgAggregateInputType = {
    idCompra?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type LineaCompraSumAggregateInputType = {
    idCompra?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type LineaCompraMinAggregateInputType = {
    idCompra?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type LineaCompraMaxAggregateInputType = {
    idCompra?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type LineaCompraCountAggregateInputType = {
    idCompra?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
    _all?: true
  }

  export type LineaCompraAggregateArgs = {
    /**
     * Filter which lineaCompra to aggregate.
     */
    where?: lineaCompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lineaCompras to fetch.
     */
    orderBy?: Enumerable<lineaCompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lineaCompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lineaCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lineaCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lineaCompras
    **/
    _count?: true | LineaCompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LineaCompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LineaCompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LineaCompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LineaCompraMaxAggregateInputType
  }

  export type GetLineaCompraAggregateType<T extends LineaCompraAggregateArgs> = {
        [P in keyof T & keyof AggregateLineaCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLineaCompra[P]>
      : GetScalarType<T[P], AggregateLineaCompra[P]>
  }




  export type LineaCompraGroupByArgs = {
    where?: lineaCompraWhereInput
    orderBy?: Enumerable<lineaCompraOrderByWithAggregationInput>
    by: LineaCompraScalarFieldEnum[]
    having?: lineaCompraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LineaCompraCountAggregateInputType | true
    _avg?: LineaCompraAvgAggregateInputType
    _sum?: LineaCompraSumAggregateInputType
    _min?: LineaCompraMinAggregateInputType
    _max?: LineaCompraMaxAggregateInputType
  }


  export type LineaCompraGroupByOutputType = {
    idCompra: number
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal
    _count: LineaCompraCountAggregateOutputType | null
    _avg: LineaCompraAvgAggregateOutputType | null
    _sum: LineaCompraSumAggregateOutputType | null
    _min: LineaCompraMinAggregateOutputType | null
    _max: LineaCompraMaxAggregateOutputType | null
  }

  type GetLineaCompraGroupByPayload<T extends LineaCompraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LineaCompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LineaCompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LineaCompraGroupByOutputType[P]>
            : GetScalarType<T[P], LineaCompraGroupByOutputType[P]>
        }
      >
    >


  export type lineaCompraSelect = {
    idCompra?: boolean
    linea?: boolean
    idProducto?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
    compra?: boolean | compraArgs
    producto?: boolean | productoArgs
  }


  export type lineaCompraInclude = {
    compra?: boolean | compraArgs
    producto?: boolean | productoArgs
  }

  export type lineaCompraGetPayload<S extends boolean | null | undefined | lineaCompraArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? lineaCompra :
    S extends undefined ? never :
    S extends { include: any } & (lineaCompraArgs | lineaCompraFindManyArgs)
    ? lineaCompra  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'compra' ? compraGetPayload<S['include'][P]> :
        P extends 'producto' ? productoGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (lineaCompraArgs | lineaCompraFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'compra' ? compraGetPayload<S['select'][P]> :
        P extends 'producto' ? productoGetPayload<S['select'][P]> :  P extends keyof lineaCompra ? lineaCompra[P] : never
  } 
      : lineaCompra


  type lineaCompraCountArgs = 
    Omit<lineaCompraFindManyArgs, 'select' | 'include'> & {
      select?: LineaCompraCountAggregateInputType | true
    }

  export interface lineaCompraDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LineaCompra that matches the filter.
     * @param {lineaCompraFindUniqueArgs} args - Arguments to find a LineaCompra
     * @example
     * // Get one LineaCompra
     * const lineaCompra = await prisma.lineaCompra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends lineaCompraFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, lineaCompraFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'lineaCompra'> extends True ? Prisma__lineaCompraClient<lineaCompraGetPayload<T>> : Prisma__lineaCompraClient<lineaCompraGetPayload<T> | null, null>

    /**
     * Find one LineaCompra that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {lineaCompraFindUniqueOrThrowArgs} args - Arguments to find a LineaCompra
     * @example
     * // Get one LineaCompra
     * const lineaCompra = await prisma.lineaCompra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends lineaCompraFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, lineaCompraFindUniqueOrThrowArgs>
    ): Prisma__lineaCompraClient<lineaCompraGetPayload<T>>

    /**
     * Find the first LineaCompra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaCompraFindFirstArgs} args - Arguments to find a LineaCompra
     * @example
     * // Get one LineaCompra
     * const lineaCompra = await prisma.lineaCompra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends lineaCompraFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, lineaCompraFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'lineaCompra'> extends True ? Prisma__lineaCompraClient<lineaCompraGetPayload<T>> : Prisma__lineaCompraClient<lineaCompraGetPayload<T> | null, null>

    /**
     * Find the first LineaCompra that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaCompraFindFirstOrThrowArgs} args - Arguments to find a LineaCompra
     * @example
     * // Get one LineaCompra
     * const lineaCompra = await prisma.lineaCompra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends lineaCompraFindFirstOrThrowArgs>(
      args?: SelectSubset<T, lineaCompraFindFirstOrThrowArgs>
    ): Prisma__lineaCompraClient<lineaCompraGetPayload<T>>

    /**
     * Find zero or more LineaCompras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaCompraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LineaCompras
     * const lineaCompras = await prisma.lineaCompra.findMany()
     * 
     * // Get first 10 LineaCompras
     * const lineaCompras = await prisma.lineaCompra.findMany({ take: 10 })
     * 
     * // Only select the `idCompra`
     * const lineaCompraWithIdCompraOnly = await prisma.lineaCompra.findMany({ select: { idCompra: true } })
     * 
    **/
    findMany<T extends lineaCompraFindManyArgs>(
      args?: SelectSubset<T, lineaCompraFindManyArgs>
    ): Prisma.PrismaPromise<Array<lineaCompraGetPayload<T>>>

    /**
     * Create a LineaCompra.
     * @param {lineaCompraCreateArgs} args - Arguments to create a LineaCompra.
     * @example
     * // Create one LineaCompra
     * const LineaCompra = await prisma.lineaCompra.create({
     *   data: {
     *     // ... data to create a LineaCompra
     *   }
     * })
     * 
    **/
    create<T extends lineaCompraCreateArgs>(
      args: SelectSubset<T, lineaCompraCreateArgs>
    ): Prisma__lineaCompraClient<lineaCompraGetPayload<T>>

    /**
     * Create many LineaCompras.
     *     @param {lineaCompraCreateManyArgs} args - Arguments to create many LineaCompras.
     *     @example
     *     // Create many LineaCompras
     *     const lineaCompra = await prisma.lineaCompra.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends lineaCompraCreateManyArgs>(
      args?: SelectSubset<T, lineaCompraCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LineaCompra.
     * @param {lineaCompraDeleteArgs} args - Arguments to delete one LineaCompra.
     * @example
     * // Delete one LineaCompra
     * const LineaCompra = await prisma.lineaCompra.delete({
     *   where: {
     *     // ... filter to delete one LineaCompra
     *   }
     * })
     * 
    **/
    delete<T extends lineaCompraDeleteArgs>(
      args: SelectSubset<T, lineaCompraDeleteArgs>
    ): Prisma__lineaCompraClient<lineaCompraGetPayload<T>>

    /**
     * Update one LineaCompra.
     * @param {lineaCompraUpdateArgs} args - Arguments to update one LineaCompra.
     * @example
     * // Update one LineaCompra
     * const lineaCompra = await prisma.lineaCompra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends lineaCompraUpdateArgs>(
      args: SelectSubset<T, lineaCompraUpdateArgs>
    ): Prisma__lineaCompraClient<lineaCompraGetPayload<T>>

    /**
     * Delete zero or more LineaCompras.
     * @param {lineaCompraDeleteManyArgs} args - Arguments to filter LineaCompras to delete.
     * @example
     * // Delete a few LineaCompras
     * const { count } = await prisma.lineaCompra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends lineaCompraDeleteManyArgs>(
      args?: SelectSubset<T, lineaCompraDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LineaCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaCompraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LineaCompras
     * const lineaCompra = await prisma.lineaCompra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends lineaCompraUpdateManyArgs>(
      args: SelectSubset<T, lineaCompraUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LineaCompra.
     * @param {lineaCompraUpsertArgs} args - Arguments to update or create a LineaCompra.
     * @example
     * // Update or create a LineaCompra
     * const lineaCompra = await prisma.lineaCompra.upsert({
     *   create: {
     *     // ... data to create a LineaCompra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LineaCompra we want to update
     *   }
     * })
    **/
    upsert<T extends lineaCompraUpsertArgs>(
      args: SelectSubset<T, lineaCompraUpsertArgs>
    ): Prisma__lineaCompraClient<lineaCompraGetPayload<T>>

    /**
     * Count the number of LineaCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaCompraCountArgs} args - Arguments to filter LineaCompras to count.
     * @example
     * // Count the number of LineaCompras
     * const count = await prisma.lineaCompra.count({
     *   where: {
     *     // ... the filter for the LineaCompras we want to count
     *   }
     * })
    **/
    count<T extends lineaCompraCountArgs>(
      args?: Subset<T, lineaCompraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LineaCompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LineaCompra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineaCompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LineaCompraAggregateArgs>(args: Subset<T, LineaCompraAggregateArgs>): Prisma.PrismaPromise<GetLineaCompraAggregateType<T>>

    /**
     * Group by LineaCompra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineaCompraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LineaCompraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LineaCompraGroupByArgs['orderBy'] }
        : { orderBy?: LineaCompraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LineaCompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLineaCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for lineaCompra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__lineaCompraClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    compra<T extends compraArgs= {}>(args?: Subset<T, compraArgs>): Prisma__compraClient<compraGetPayload<T> | Null>;

    producto<T extends productoArgs= {}>(args?: Subset<T, productoArgs>): Prisma__productoClient<productoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * lineaCompra base type for findUnique actions
   */
  export type lineaCompraFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    /**
     * Filter, which lineaCompra to fetch.
     */
    where: lineaCompraWhereUniqueInput
  }

  /**
   * lineaCompra findUnique
   */
  export interface lineaCompraFindUniqueArgs extends lineaCompraFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * lineaCompra findUniqueOrThrow
   */
  export type lineaCompraFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    /**
     * Filter, which lineaCompra to fetch.
     */
    where: lineaCompraWhereUniqueInput
  }


  /**
   * lineaCompra base type for findFirst actions
   */
  export type lineaCompraFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    /**
     * Filter, which lineaCompra to fetch.
     */
    where?: lineaCompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lineaCompras to fetch.
     */
    orderBy?: Enumerable<lineaCompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lineaCompras.
     */
    cursor?: lineaCompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lineaCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lineaCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lineaCompras.
     */
    distinct?: Enumerable<LineaCompraScalarFieldEnum>
  }

  /**
   * lineaCompra findFirst
   */
  export interface lineaCompraFindFirstArgs extends lineaCompraFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * lineaCompra findFirstOrThrow
   */
  export type lineaCompraFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    /**
     * Filter, which lineaCompra to fetch.
     */
    where?: lineaCompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lineaCompras to fetch.
     */
    orderBy?: Enumerable<lineaCompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lineaCompras.
     */
    cursor?: lineaCompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lineaCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lineaCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lineaCompras.
     */
    distinct?: Enumerable<LineaCompraScalarFieldEnum>
  }


  /**
   * lineaCompra findMany
   */
  export type lineaCompraFindManyArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    /**
     * Filter, which lineaCompras to fetch.
     */
    where?: lineaCompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lineaCompras to fetch.
     */
    orderBy?: Enumerable<lineaCompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lineaCompras.
     */
    cursor?: lineaCompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lineaCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lineaCompras.
     */
    skip?: number
    distinct?: Enumerable<LineaCompraScalarFieldEnum>
  }


  /**
   * lineaCompra create
   */
  export type lineaCompraCreateArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    /**
     * The data needed to create a lineaCompra.
     */
    data: XOR<lineaCompraCreateInput, lineaCompraUncheckedCreateInput>
  }


  /**
   * lineaCompra createMany
   */
  export type lineaCompraCreateManyArgs = {
    /**
     * The data used to create many lineaCompras.
     */
    data: Enumerable<lineaCompraCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * lineaCompra update
   */
  export type lineaCompraUpdateArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    /**
     * The data needed to update a lineaCompra.
     */
    data: XOR<lineaCompraUpdateInput, lineaCompraUncheckedUpdateInput>
    /**
     * Choose, which lineaCompra to update.
     */
    where: lineaCompraWhereUniqueInput
  }


  /**
   * lineaCompra updateMany
   */
  export type lineaCompraUpdateManyArgs = {
    /**
     * The data used to update lineaCompras.
     */
    data: XOR<lineaCompraUpdateManyMutationInput, lineaCompraUncheckedUpdateManyInput>
    /**
     * Filter which lineaCompras to update
     */
    where?: lineaCompraWhereInput
  }


  /**
   * lineaCompra upsert
   */
  export type lineaCompraUpsertArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    /**
     * The filter to search for the lineaCompra to update in case it exists.
     */
    where: lineaCompraWhereUniqueInput
    /**
     * In case the lineaCompra found by the `where` argument doesn't exist, create a new lineaCompra with this data.
     */
    create: XOR<lineaCompraCreateInput, lineaCompraUncheckedCreateInput>
    /**
     * In case the lineaCompra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lineaCompraUpdateInput, lineaCompraUncheckedUpdateInput>
  }


  /**
   * lineaCompra delete
   */
  export type lineaCompraDeleteArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
    /**
     * Filter which lineaCompra to delete.
     */
    where: lineaCompraWhereUniqueInput
  }


  /**
   * lineaCompra deleteMany
   */
  export type lineaCompraDeleteManyArgs = {
    /**
     * Filter which lineaCompras to delete
     */
    where?: lineaCompraWhereInput
  }


  /**
   * lineaCompra without action
   */
  export type lineaCompraArgs = {
    /**
     * Select specific fields to fetch from the lineaCompra
     */
    select?: lineaCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaCompraInclude | null
  }



  /**
   * Model venta
   */


  export type AggregateVenta = {
    _count: VentaCountAggregateOutputType | null
    _avg: VentaAvgAggregateOutputType | null
    _sum: VentaSumAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  export type VentaAvgAggregateOutputType = {
    id: number | null
  }

  export type VentaSumAggregateOutputType = {
    id: number | null
  }

  export type VentaMinAggregateOutputType = {
    id: number | null
    fecha: Date | null
    cliente: string | null
  }

  export type VentaMaxAggregateOutputType = {
    id: number | null
    fecha: Date | null
    cliente: string | null
  }

  export type VentaCountAggregateOutputType = {
    id: number
    fecha: number
    cliente: number
    _all: number
  }


  export type VentaAvgAggregateInputType = {
    id?: true
  }

  export type VentaSumAggregateInputType = {
    id?: true
  }

  export type VentaMinAggregateInputType = {
    id?: true
    fecha?: true
    cliente?: true
  }

  export type VentaMaxAggregateInputType = {
    id?: true
    fecha?: true
    cliente?: true
  }

  export type VentaCountAggregateInputType = {
    id?: true
    fecha?: true
    cliente?: true
    _all?: true
  }

  export type VentaAggregateArgs = {
    /**
     * Filter which venta to aggregate.
     */
    where?: ventaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ventas to fetch.
     */
    orderBy?: Enumerable<ventaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ventaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ventas
    **/
    _count?: true | VentaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VentaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VentaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VentaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VentaMaxAggregateInputType
  }

  export type GetVentaAggregateType<T extends VentaAggregateArgs> = {
        [P in keyof T & keyof AggregateVenta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenta[P]>
      : GetScalarType<T[P], AggregateVenta[P]>
  }




  export type VentaGroupByArgs = {
    where?: ventaWhereInput
    orderBy?: Enumerable<ventaOrderByWithAggregationInput>
    by: VentaScalarFieldEnum[]
    having?: ventaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VentaCountAggregateInputType | true
    _avg?: VentaAvgAggregateInputType
    _sum?: VentaSumAggregateInputType
    _min?: VentaMinAggregateInputType
    _max?: VentaMaxAggregateInputType
  }


  export type VentaGroupByOutputType = {
    id: number
    fecha: Date
    cliente: string | null
    _count: VentaCountAggregateOutputType | null
    _avg: VentaAvgAggregateOutputType | null
    _sum: VentaSumAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  type GetVentaGroupByPayload<T extends VentaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VentaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VentaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VentaGroupByOutputType[P]>
            : GetScalarType<T[P], VentaGroupByOutputType[P]>
        }
      >
    >


  export type ventaSelect = {
    id?: boolean
    fecha?: boolean
    cliente?: boolean
    lineas?: boolean | venta$lineasArgs
    _count?: boolean | VentaCountOutputTypeArgs
  }


  export type ventaInclude = {
    lineas?: boolean | venta$lineasArgs
    _count?: boolean | VentaCountOutputTypeArgs
  }

  export type ventaGetPayload<S extends boolean | null | undefined | ventaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? venta :
    S extends undefined ? never :
    S extends { include: any } & (ventaArgs | ventaFindManyArgs)
    ? venta  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'lineas' ? Array < lineaVentaGetPayload<S['include'][P]>>  :
        P extends '_count' ? VentaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ventaArgs | ventaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'lineas' ? Array < lineaVentaGetPayload<S['select'][P]>>  :
        P extends '_count' ? VentaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof venta ? venta[P] : never
  } 
      : venta


  type ventaCountArgs = 
    Omit<ventaFindManyArgs, 'select' | 'include'> & {
      select?: VentaCountAggregateInputType | true
    }

  export interface ventaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Venta that matches the filter.
     * @param {ventaFindUniqueArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ventaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ventaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'venta'> extends True ? Prisma__ventaClient<ventaGetPayload<T>> : Prisma__ventaClient<ventaGetPayload<T> | null, null>

    /**
     * Find one Venta that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ventaFindUniqueOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ventaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ventaFindUniqueOrThrowArgs>
    ): Prisma__ventaClient<ventaGetPayload<T>>

    /**
     * Find the first Venta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ventaFindFirstArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ventaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ventaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'venta'> extends True ? Prisma__ventaClient<ventaGetPayload<T>> : Prisma__ventaClient<ventaGetPayload<T> | null, null>

    /**
     * Find the first Venta that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ventaFindFirstOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ventaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ventaFindFirstOrThrowArgs>
    ): Prisma__ventaClient<ventaGetPayload<T>>

    /**
     * Find zero or more Ventas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ventaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ventas
     * const ventas = await prisma.venta.findMany()
     * 
     * // Get first 10 Ventas
     * const ventas = await prisma.venta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ventaWithIdOnly = await prisma.venta.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ventaFindManyArgs>(
      args?: SelectSubset<T, ventaFindManyArgs>
    ): Prisma.PrismaPromise<Array<ventaGetPayload<T>>>

    /**
     * Create a Venta.
     * @param {ventaCreateArgs} args - Arguments to create a Venta.
     * @example
     * // Create one Venta
     * const Venta = await prisma.venta.create({
     *   data: {
     *     // ... data to create a Venta
     *   }
     * })
     * 
    **/
    create<T extends ventaCreateArgs>(
      args: SelectSubset<T, ventaCreateArgs>
    ): Prisma__ventaClient<ventaGetPayload<T>>

    /**
     * Create many Ventas.
     *     @param {ventaCreateManyArgs} args - Arguments to create many Ventas.
     *     @example
     *     // Create many Ventas
     *     const venta = await prisma.venta.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ventaCreateManyArgs>(
      args?: SelectSubset<T, ventaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Venta.
     * @param {ventaDeleteArgs} args - Arguments to delete one Venta.
     * @example
     * // Delete one Venta
     * const Venta = await prisma.venta.delete({
     *   where: {
     *     // ... filter to delete one Venta
     *   }
     * })
     * 
    **/
    delete<T extends ventaDeleteArgs>(
      args: SelectSubset<T, ventaDeleteArgs>
    ): Prisma__ventaClient<ventaGetPayload<T>>

    /**
     * Update one Venta.
     * @param {ventaUpdateArgs} args - Arguments to update one Venta.
     * @example
     * // Update one Venta
     * const venta = await prisma.venta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ventaUpdateArgs>(
      args: SelectSubset<T, ventaUpdateArgs>
    ): Prisma__ventaClient<ventaGetPayload<T>>

    /**
     * Delete zero or more Ventas.
     * @param {ventaDeleteManyArgs} args - Arguments to filter Ventas to delete.
     * @example
     * // Delete a few Ventas
     * const { count } = await prisma.venta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ventaDeleteManyArgs>(
      args?: SelectSubset<T, ventaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ventaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ventas
     * const venta = await prisma.venta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ventaUpdateManyArgs>(
      args: SelectSubset<T, ventaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Venta.
     * @param {ventaUpsertArgs} args - Arguments to update or create a Venta.
     * @example
     * // Update or create a Venta
     * const venta = await prisma.venta.upsert({
     *   create: {
     *     // ... data to create a Venta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venta we want to update
     *   }
     * })
    **/
    upsert<T extends ventaUpsertArgs>(
      args: SelectSubset<T, ventaUpsertArgs>
    ): Prisma__ventaClient<ventaGetPayload<T>>

    /**
     * Count the number of Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ventaCountArgs} args - Arguments to filter Ventas to count.
     * @example
     * // Count the number of Ventas
     * const count = await prisma.venta.count({
     *   where: {
     *     // ... the filter for the Ventas we want to count
     *   }
     * })
    **/
    count<T extends ventaCountArgs>(
      args?: Subset<T, ventaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VentaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VentaAggregateArgs>(args: Subset<T, VentaAggregateArgs>): Prisma.PrismaPromise<GetVentaAggregateType<T>>

    /**
     * Group by Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VentaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VentaGroupByArgs['orderBy'] }
        : { orderBy?: VentaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for venta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ventaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    lineas<T extends venta$lineasArgs= {}>(args?: Subset<T, venta$lineasArgs>): Prisma.PrismaPromise<Array<lineaVentaGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * venta base type for findUnique actions
   */
  export type ventaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
    /**
     * Filter, which venta to fetch.
     */
    where: ventaWhereUniqueInput
  }

  /**
   * venta findUnique
   */
  export interface ventaFindUniqueArgs extends ventaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * venta findUniqueOrThrow
   */
  export type ventaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
    /**
     * Filter, which venta to fetch.
     */
    where: ventaWhereUniqueInput
  }


  /**
   * venta base type for findFirst actions
   */
  export type ventaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
    /**
     * Filter, which venta to fetch.
     */
    where?: ventaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ventas to fetch.
     */
    orderBy?: Enumerable<ventaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ventas.
     */
    cursor?: ventaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ventas.
     */
    distinct?: Enumerable<VentaScalarFieldEnum>
  }

  /**
   * venta findFirst
   */
  export interface ventaFindFirstArgs extends ventaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * venta findFirstOrThrow
   */
  export type ventaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
    /**
     * Filter, which venta to fetch.
     */
    where?: ventaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ventas to fetch.
     */
    orderBy?: Enumerable<ventaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ventas.
     */
    cursor?: ventaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ventas.
     */
    distinct?: Enumerable<VentaScalarFieldEnum>
  }


  /**
   * venta findMany
   */
  export type ventaFindManyArgs = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
    /**
     * Filter, which ventas to fetch.
     */
    where?: ventaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ventas to fetch.
     */
    orderBy?: Enumerable<ventaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ventas.
     */
    cursor?: ventaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ventas.
     */
    skip?: number
    distinct?: Enumerable<VentaScalarFieldEnum>
  }


  /**
   * venta create
   */
  export type ventaCreateArgs = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
    /**
     * The data needed to create a venta.
     */
    data: XOR<ventaCreateInput, ventaUncheckedCreateInput>
  }


  /**
   * venta createMany
   */
  export type ventaCreateManyArgs = {
    /**
     * The data used to create many ventas.
     */
    data: Enumerable<ventaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * venta update
   */
  export type ventaUpdateArgs = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
    /**
     * The data needed to update a venta.
     */
    data: XOR<ventaUpdateInput, ventaUncheckedUpdateInput>
    /**
     * Choose, which venta to update.
     */
    where: ventaWhereUniqueInput
  }


  /**
   * venta updateMany
   */
  export type ventaUpdateManyArgs = {
    /**
     * The data used to update ventas.
     */
    data: XOR<ventaUpdateManyMutationInput, ventaUncheckedUpdateManyInput>
    /**
     * Filter which ventas to update
     */
    where?: ventaWhereInput
  }


  /**
   * venta upsert
   */
  export type ventaUpsertArgs = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
    /**
     * The filter to search for the venta to update in case it exists.
     */
    where: ventaWhereUniqueInput
    /**
     * In case the venta found by the `where` argument doesn't exist, create a new venta with this data.
     */
    create: XOR<ventaCreateInput, ventaUncheckedCreateInput>
    /**
     * In case the venta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ventaUpdateInput, ventaUncheckedUpdateInput>
  }


  /**
   * venta delete
   */
  export type ventaDeleteArgs = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
    /**
     * Filter which venta to delete.
     */
    where: ventaWhereUniqueInput
  }


  /**
   * venta deleteMany
   */
  export type ventaDeleteManyArgs = {
    /**
     * Filter which ventas to delete
     */
    where?: ventaWhereInput
  }


  /**
   * venta.lineas
   */
  export type venta$lineasArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    where?: lineaVentaWhereInput
    orderBy?: Enumerable<lineaVentaOrderByWithRelationInput>
    cursor?: lineaVentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LineaVentaScalarFieldEnum>
  }


  /**
   * venta without action
   */
  export type ventaArgs = {
    /**
     * Select specific fields to fetch from the venta
     */
    select?: ventaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ventaInclude | null
  }



  /**
   * Model lineaVenta
   */


  export type AggregateLineaVenta = {
    _count: LineaVentaCountAggregateOutputType | null
    _avg: LineaVentaAvgAggregateOutputType | null
    _sum: LineaVentaSumAggregateOutputType | null
    _min: LineaVentaMinAggregateOutputType | null
    _max: LineaVentaMaxAggregateOutputType | null
  }

  export type LineaVentaAvgAggregateOutputType = {
    idVenta: number | null
    linea: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type LineaVentaSumAggregateOutputType = {
    idVenta: number | null
    linea: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type LineaVentaMinAggregateOutputType = {
    idVenta: number | null
    linea: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type LineaVentaMaxAggregateOutputType = {
    idVenta: number | null
    linea: number | null
    idProducto: number | null
    cantidad: number | null
    precioUnitario: Decimal | null
  }

  export type LineaVentaCountAggregateOutputType = {
    idVenta: number
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: number
    _all: number
  }


  export type LineaVentaAvgAggregateInputType = {
    idVenta?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type LineaVentaSumAggregateInputType = {
    idVenta?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type LineaVentaMinAggregateInputType = {
    idVenta?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type LineaVentaMaxAggregateInputType = {
    idVenta?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
  }

  export type LineaVentaCountAggregateInputType = {
    idVenta?: true
    linea?: true
    idProducto?: true
    cantidad?: true
    precioUnitario?: true
    _all?: true
  }

  export type LineaVentaAggregateArgs = {
    /**
     * Filter which lineaVenta to aggregate.
     */
    where?: lineaVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lineaVentas to fetch.
     */
    orderBy?: Enumerable<lineaVentaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lineaVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lineaVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lineaVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lineaVentas
    **/
    _count?: true | LineaVentaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LineaVentaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LineaVentaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LineaVentaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LineaVentaMaxAggregateInputType
  }

  export type GetLineaVentaAggregateType<T extends LineaVentaAggregateArgs> = {
        [P in keyof T & keyof AggregateLineaVenta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLineaVenta[P]>
      : GetScalarType<T[P], AggregateLineaVenta[P]>
  }




  export type LineaVentaGroupByArgs = {
    where?: lineaVentaWhereInput
    orderBy?: Enumerable<lineaVentaOrderByWithAggregationInput>
    by: LineaVentaScalarFieldEnum[]
    having?: lineaVentaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LineaVentaCountAggregateInputType | true
    _avg?: LineaVentaAvgAggregateInputType
    _sum?: LineaVentaSumAggregateInputType
    _min?: LineaVentaMinAggregateInputType
    _max?: LineaVentaMaxAggregateInputType
  }


  export type LineaVentaGroupByOutputType = {
    idVenta: number
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal
    _count: LineaVentaCountAggregateOutputType | null
    _avg: LineaVentaAvgAggregateOutputType | null
    _sum: LineaVentaSumAggregateOutputType | null
    _min: LineaVentaMinAggregateOutputType | null
    _max: LineaVentaMaxAggregateOutputType | null
  }

  type GetLineaVentaGroupByPayload<T extends LineaVentaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LineaVentaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LineaVentaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LineaVentaGroupByOutputType[P]>
            : GetScalarType<T[P], LineaVentaGroupByOutputType[P]>
        }
      >
    >


  export type lineaVentaSelect = {
    idVenta?: boolean
    linea?: boolean
    idProducto?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
    venta?: boolean | ventaArgs
    producto?: boolean | productoArgs
  }


  export type lineaVentaInclude = {
    venta?: boolean | ventaArgs
    producto?: boolean | productoArgs
  }

  export type lineaVentaGetPayload<S extends boolean | null | undefined | lineaVentaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? lineaVenta :
    S extends undefined ? never :
    S extends { include: any } & (lineaVentaArgs | lineaVentaFindManyArgs)
    ? lineaVenta  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'venta' ? ventaGetPayload<S['include'][P]> :
        P extends 'producto' ? productoGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (lineaVentaArgs | lineaVentaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'venta' ? ventaGetPayload<S['select'][P]> :
        P extends 'producto' ? productoGetPayload<S['select'][P]> :  P extends keyof lineaVenta ? lineaVenta[P] : never
  } 
      : lineaVenta


  type lineaVentaCountArgs = 
    Omit<lineaVentaFindManyArgs, 'select' | 'include'> & {
      select?: LineaVentaCountAggregateInputType | true
    }

  export interface lineaVentaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LineaVenta that matches the filter.
     * @param {lineaVentaFindUniqueArgs} args - Arguments to find a LineaVenta
     * @example
     * // Get one LineaVenta
     * const lineaVenta = await prisma.lineaVenta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends lineaVentaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, lineaVentaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'lineaVenta'> extends True ? Prisma__lineaVentaClient<lineaVentaGetPayload<T>> : Prisma__lineaVentaClient<lineaVentaGetPayload<T> | null, null>

    /**
     * Find one LineaVenta that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {lineaVentaFindUniqueOrThrowArgs} args - Arguments to find a LineaVenta
     * @example
     * // Get one LineaVenta
     * const lineaVenta = await prisma.lineaVenta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends lineaVentaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, lineaVentaFindUniqueOrThrowArgs>
    ): Prisma__lineaVentaClient<lineaVentaGetPayload<T>>

    /**
     * Find the first LineaVenta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaVentaFindFirstArgs} args - Arguments to find a LineaVenta
     * @example
     * // Get one LineaVenta
     * const lineaVenta = await prisma.lineaVenta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends lineaVentaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, lineaVentaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'lineaVenta'> extends True ? Prisma__lineaVentaClient<lineaVentaGetPayload<T>> : Prisma__lineaVentaClient<lineaVentaGetPayload<T> | null, null>

    /**
     * Find the first LineaVenta that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaVentaFindFirstOrThrowArgs} args - Arguments to find a LineaVenta
     * @example
     * // Get one LineaVenta
     * const lineaVenta = await prisma.lineaVenta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends lineaVentaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, lineaVentaFindFirstOrThrowArgs>
    ): Prisma__lineaVentaClient<lineaVentaGetPayload<T>>

    /**
     * Find zero or more LineaVentas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaVentaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LineaVentas
     * const lineaVentas = await prisma.lineaVenta.findMany()
     * 
     * // Get first 10 LineaVentas
     * const lineaVentas = await prisma.lineaVenta.findMany({ take: 10 })
     * 
     * // Only select the `idVenta`
     * const lineaVentaWithIdVentaOnly = await prisma.lineaVenta.findMany({ select: { idVenta: true } })
     * 
    **/
    findMany<T extends lineaVentaFindManyArgs>(
      args?: SelectSubset<T, lineaVentaFindManyArgs>
    ): Prisma.PrismaPromise<Array<lineaVentaGetPayload<T>>>

    /**
     * Create a LineaVenta.
     * @param {lineaVentaCreateArgs} args - Arguments to create a LineaVenta.
     * @example
     * // Create one LineaVenta
     * const LineaVenta = await prisma.lineaVenta.create({
     *   data: {
     *     // ... data to create a LineaVenta
     *   }
     * })
     * 
    **/
    create<T extends lineaVentaCreateArgs>(
      args: SelectSubset<T, lineaVentaCreateArgs>
    ): Prisma__lineaVentaClient<lineaVentaGetPayload<T>>

    /**
     * Create many LineaVentas.
     *     @param {lineaVentaCreateManyArgs} args - Arguments to create many LineaVentas.
     *     @example
     *     // Create many LineaVentas
     *     const lineaVenta = await prisma.lineaVenta.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends lineaVentaCreateManyArgs>(
      args?: SelectSubset<T, lineaVentaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LineaVenta.
     * @param {lineaVentaDeleteArgs} args - Arguments to delete one LineaVenta.
     * @example
     * // Delete one LineaVenta
     * const LineaVenta = await prisma.lineaVenta.delete({
     *   where: {
     *     // ... filter to delete one LineaVenta
     *   }
     * })
     * 
    **/
    delete<T extends lineaVentaDeleteArgs>(
      args: SelectSubset<T, lineaVentaDeleteArgs>
    ): Prisma__lineaVentaClient<lineaVentaGetPayload<T>>

    /**
     * Update one LineaVenta.
     * @param {lineaVentaUpdateArgs} args - Arguments to update one LineaVenta.
     * @example
     * // Update one LineaVenta
     * const lineaVenta = await prisma.lineaVenta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends lineaVentaUpdateArgs>(
      args: SelectSubset<T, lineaVentaUpdateArgs>
    ): Prisma__lineaVentaClient<lineaVentaGetPayload<T>>

    /**
     * Delete zero or more LineaVentas.
     * @param {lineaVentaDeleteManyArgs} args - Arguments to filter LineaVentas to delete.
     * @example
     * // Delete a few LineaVentas
     * const { count } = await prisma.lineaVenta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends lineaVentaDeleteManyArgs>(
      args?: SelectSubset<T, lineaVentaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LineaVentas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaVentaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LineaVentas
     * const lineaVenta = await prisma.lineaVenta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends lineaVentaUpdateManyArgs>(
      args: SelectSubset<T, lineaVentaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LineaVenta.
     * @param {lineaVentaUpsertArgs} args - Arguments to update or create a LineaVenta.
     * @example
     * // Update or create a LineaVenta
     * const lineaVenta = await prisma.lineaVenta.upsert({
     *   create: {
     *     // ... data to create a LineaVenta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LineaVenta we want to update
     *   }
     * })
    **/
    upsert<T extends lineaVentaUpsertArgs>(
      args: SelectSubset<T, lineaVentaUpsertArgs>
    ): Prisma__lineaVentaClient<lineaVentaGetPayload<T>>

    /**
     * Count the number of LineaVentas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lineaVentaCountArgs} args - Arguments to filter LineaVentas to count.
     * @example
     * // Count the number of LineaVentas
     * const count = await prisma.lineaVenta.count({
     *   where: {
     *     // ... the filter for the LineaVentas we want to count
     *   }
     * })
    **/
    count<T extends lineaVentaCountArgs>(
      args?: Subset<T, lineaVentaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LineaVentaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LineaVenta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineaVentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LineaVentaAggregateArgs>(args: Subset<T, LineaVentaAggregateArgs>): Prisma.PrismaPromise<GetLineaVentaAggregateType<T>>

    /**
     * Group by LineaVenta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LineaVentaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LineaVentaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LineaVentaGroupByArgs['orderBy'] }
        : { orderBy?: LineaVentaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LineaVentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLineaVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for lineaVenta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__lineaVentaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    venta<T extends ventaArgs= {}>(args?: Subset<T, ventaArgs>): Prisma__ventaClient<ventaGetPayload<T> | Null>;

    producto<T extends productoArgs= {}>(args?: Subset<T, productoArgs>): Prisma__productoClient<productoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * lineaVenta base type for findUnique actions
   */
  export type lineaVentaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    /**
     * Filter, which lineaVenta to fetch.
     */
    where: lineaVentaWhereUniqueInput
  }

  /**
   * lineaVenta findUnique
   */
  export interface lineaVentaFindUniqueArgs extends lineaVentaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * lineaVenta findUniqueOrThrow
   */
  export type lineaVentaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    /**
     * Filter, which lineaVenta to fetch.
     */
    where: lineaVentaWhereUniqueInput
  }


  /**
   * lineaVenta base type for findFirst actions
   */
  export type lineaVentaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    /**
     * Filter, which lineaVenta to fetch.
     */
    where?: lineaVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lineaVentas to fetch.
     */
    orderBy?: Enumerable<lineaVentaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lineaVentas.
     */
    cursor?: lineaVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lineaVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lineaVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lineaVentas.
     */
    distinct?: Enumerable<LineaVentaScalarFieldEnum>
  }

  /**
   * lineaVenta findFirst
   */
  export interface lineaVentaFindFirstArgs extends lineaVentaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * lineaVenta findFirstOrThrow
   */
  export type lineaVentaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    /**
     * Filter, which lineaVenta to fetch.
     */
    where?: lineaVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lineaVentas to fetch.
     */
    orderBy?: Enumerable<lineaVentaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lineaVentas.
     */
    cursor?: lineaVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lineaVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lineaVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lineaVentas.
     */
    distinct?: Enumerable<LineaVentaScalarFieldEnum>
  }


  /**
   * lineaVenta findMany
   */
  export type lineaVentaFindManyArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    /**
     * Filter, which lineaVentas to fetch.
     */
    where?: lineaVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lineaVentas to fetch.
     */
    orderBy?: Enumerable<lineaVentaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lineaVentas.
     */
    cursor?: lineaVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lineaVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lineaVentas.
     */
    skip?: number
    distinct?: Enumerable<LineaVentaScalarFieldEnum>
  }


  /**
   * lineaVenta create
   */
  export type lineaVentaCreateArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    /**
     * The data needed to create a lineaVenta.
     */
    data: XOR<lineaVentaCreateInput, lineaVentaUncheckedCreateInput>
  }


  /**
   * lineaVenta createMany
   */
  export type lineaVentaCreateManyArgs = {
    /**
     * The data used to create many lineaVentas.
     */
    data: Enumerable<lineaVentaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * lineaVenta update
   */
  export type lineaVentaUpdateArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    /**
     * The data needed to update a lineaVenta.
     */
    data: XOR<lineaVentaUpdateInput, lineaVentaUncheckedUpdateInput>
    /**
     * Choose, which lineaVenta to update.
     */
    where: lineaVentaWhereUniqueInput
  }


  /**
   * lineaVenta updateMany
   */
  export type lineaVentaUpdateManyArgs = {
    /**
     * The data used to update lineaVentas.
     */
    data: XOR<lineaVentaUpdateManyMutationInput, lineaVentaUncheckedUpdateManyInput>
    /**
     * Filter which lineaVentas to update
     */
    where?: lineaVentaWhereInput
  }


  /**
   * lineaVenta upsert
   */
  export type lineaVentaUpsertArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    /**
     * The filter to search for the lineaVenta to update in case it exists.
     */
    where: lineaVentaWhereUniqueInput
    /**
     * In case the lineaVenta found by the `where` argument doesn't exist, create a new lineaVenta with this data.
     */
    create: XOR<lineaVentaCreateInput, lineaVentaUncheckedCreateInput>
    /**
     * In case the lineaVenta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lineaVentaUpdateInput, lineaVentaUncheckedUpdateInput>
  }


  /**
   * lineaVenta delete
   */
  export type lineaVentaDeleteArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
    /**
     * Filter which lineaVenta to delete.
     */
    where: lineaVentaWhereUniqueInput
  }


  /**
   * lineaVenta deleteMany
   */
  export type lineaVentaDeleteManyArgs = {
    /**
     * Filter which lineaVentas to delete
     */
    where?: lineaVentaWhereInput
  }


  /**
   * lineaVenta without action
   */
  export type lineaVentaArgs = {
    /**
     * Select specific fields to fetch from the lineaVenta
     */
    select?: lineaVentaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lineaVentaInclude | null
  }



  /**
   * Enums
   */

  export const CompraScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    proveedor: 'proveedor'
  };

  export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


  export const LineaCompraScalarFieldEnum: {
    idCompra: 'idCompra',
    linea: 'linea',
    idProducto: 'idProducto',
    cantidad: 'cantidad',
    precioUnitario: 'precioUnitario'
  };

  export type LineaCompraScalarFieldEnum = (typeof LineaCompraScalarFieldEnum)[keyof typeof LineaCompraScalarFieldEnum]


  export const LineaVentaScalarFieldEnum: {
    idVenta: 'idVenta',
    linea: 'linea',
    idProducto: 'idProducto',
    cantidad: 'cantidad',
    precioUnitario: 'precioUnitario'
  };

  export type LineaVentaScalarFieldEnum = (typeof LineaVentaScalarFieldEnum)[keyof typeof LineaVentaScalarFieldEnum]


  export const ProductoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    stock: 'stock',
    precio: 'precio',
    categoria: 'categoria',
    fechaActualizacion: 'fechaActualizacion'
  };

  export type ProductoScalarFieldEnum = (typeof ProductoScalarFieldEnum)[keyof typeof ProductoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VentaScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    cliente: 'cliente'
  };

  export type VentaScalarFieldEnum = (typeof VentaScalarFieldEnum)[keyof typeof VentaScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type productoWhereInput = {
    AND?: Enumerable<productoWhereInput>
    OR?: Enumerable<productoWhereInput>
    NOT?: Enumerable<productoWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    stock?: IntFilter | number
    precio?: DecimalFilter | Decimal | DecimalJsLike | number | string
    categoria?: StringNullableFilter | string | null
    fechaActualizacion?: DateTimeNullableFilter | Date | string | null
    lineasCompra?: LineaCompraListRelationFilter
    LineasVenta?: LineaVentaListRelationFilter
  }

  export type productoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
    categoria?: SortOrder
    fechaActualizacion?: SortOrder
    lineasCompra?: lineaCompraOrderByRelationAggregateInput
    LineasVenta?: lineaVentaOrderByRelationAggregateInput
  }

  export type productoWhereUniqueInput = {
    id?: number
  }

  export type productoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
    categoria?: SortOrder
    fechaActualizacion?: SortOrder
    _count?: productoCountOrderByAggregateInput
    _avg?: productoAvgOrderByAggregateInput
    _max?: productoMaxOrderByAggregateInput
    _min?: productoMinOrderByAggregateInput
    _sum?: productoSumOrderByAggregateInput
  }

  export type productoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productoScalarWhereWithAggregatesInput>
    OR?: Enumerable<productoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
    stock?: IntWithAggregatesFilter | number
    precio?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    categoria?: StringNullableWithAggregatesFilter | string | null
    fechaActualizacion?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type compraWhereInput = {
    AND?: Enumerable<compraWhereInput>
    OR?: Enumerable<compraWhereInput>
    NOT?: Enumerable<compraWhereInput>
    id?: IntFilter | number
    fecha?: DateTimeFilter | Date | string
    proveedor?: StringNullableFilter | string | null
    lineas?: LineaCompraListRelationFilter
  }

  export type compraOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    proveedor?: SortOrder
    lineas?: lineaCompraOrderByRelationAggregateInput
  }

  export type compraWhereUniqueInput = {
    id?: number
  }

  export type compraOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    proveedor?: SortOrder
    _count?: compraCountOrderByAggregateInput
    _avg?: compraAvgOrderByAggregateInput
    _max?: compraMaxOrderByAggregateInput
    _min?: compraMinOrderByAggregateInput
    _sum?: compraSumOrderByAggregateInput
  }

  export type compraScalarWhereWithAggregatesInput = {
    AND?: Enumerable<compraScalarWhereWithAggregatesInput>
    OR?: Enumerable<compraScalarWhereWithAggregatesInput>
    NOT?: Enumerable<compraScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fecha?: DateTimeWithAggregatesFilter | Date | string
    proveedor?: StringNullableWithAggregatesFilter | string | null
  }

  export type lineaCompraWhereInput = {
    AND?: Enumerable<lineaCompraWhereInput>
    OR?: Enumerable<lineaCompraWhereInput>
    NOT?: Enumerable<lineaCompraWhereInput>
    idCompra?: IntFilter | number
    linea?: IntFilter | number
    idProducto?: IntFilter | number
    cantidad?: IntFilter | number
    precioUnitario?: DecimalFilter | Decimal | DecimalJsLike | number | string
    compra?: XOR<CompraRelationFilter, compraWhereInput>
    producto?: XOR<ProductoRelationFilter, productoWhereInput>
  }

  export type lineaCompraOrderByWithRelationInput = {
    idCompra?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    compra?: compraOrderByWithRelationInput
    producto?: productoOrderByWithRelationInput
  }

  export type lineaCompraWhereUniqueInput = {
    linea_idCompra?: lineaCompraLineaIdCompraCompoundUniqueInput
  }

  export type lineaCompraOrderByWithAggregationInput = {
    idCompra?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    _count?: lineaCompraCountOrderByAggregateInput
    _avg?: lineaCompraAvgOrderByAggregateInput
    _max?: lineaCompraMaxOrderByAggregateInput
    _min?: lineaCompraMinOrderByAggregateInput
    _sum?: lineaCompraSumOrderByAggregateInput
  }

  export type lineaCompraScalarWhereWithAggregatesInput = {
    AND?: Enumerable<lineaCompraScalarWhereWithAggregatesInput>
    OR?: Enumerable<lineaCompraScalarWhereWithAggregatesInput>
    NOT?: Enumerable<lineaCompraScalarWhereWithAggregatesInput>
    idCompra?: IntWithAggregatesFilter | number
    linea?: IntWithAggregatesFilter | number
    idProducto?: IntWithAggregatesFilter | number
    cantidad?: IntWithAggregatesFilter | number
    precioUnitario?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type ventaWhereInput = {
    AND?: Enumerable<ventaWhereInput>
    OR?: Enumerable<ventaWhereInput>
    NOT?: Enumerable<ventaWhereInput>
    id?: IntFilter | number
    fecha?: DateTimeFilter | Date | string
    cliente?: StringNullableFilter | string | null
    lineas?: LineaVentaListRelationFilter
  }

  export type ventaOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    cliente?: SortOrder
    lineas?: lineaVentaOrderByRelationAggregateInput
  }

  export type ventaWhereUniqueInput = {
    id?: number
  }

  export type ventaOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    cliente?: SortOrder
    _count?: ventaCountOrderByAggregateInput
    _avg?: ventaAvgOrderByAggregateInput
    _max?: ventaMaxOrderByAggregateInput
    _min?: ventaMinOrderByAggregateInput
    _sum?: ventaSumOrderByAggregateInput
  }

  export type ventaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ventaScalarWhereWithAggregatesInput>
    OR?: Enumerable<ventaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ventaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fecha?: DateTimeWithAggregatesFilter | Date | string
    cliente?: StringNullableWithAggregatesFilter | string | null
  }

  export type lineaVentaWhereInput = {
    AND?: Enumerable<lineaVentaWhereInput>
    OR?: Enumerable<lineaVentaWhereInput>
    NOT?: Enumerable<lineaVentaWhereInput>
    idVenta?: IntFilter | number
    linea?: IntFilter | number
    idProducto?: IntFilter | number
    cantidad?: IntFilter | number
    precioUnitario?: DecimalFilter | Decimal | DecimalJsLike | number | string
    venta?: XOR<VentaRelationFilter, ventaWhereInput>
    producto?: XOR<ProductoRelationFilter, productoWhereInput>
  }

  export type lineaVentaOrderByWithRelationInput = {
    idVenta?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    venta?: ventaOrderByWithRelationInput
    producto?: productoOrderByWithRelationInput
  }

  export type lineaVentaWhereUniqueInput = {
    linea_idVenta?: lineaVentaLineaIdVentaCompoundUniqueInput
  }

  export type lineaVentaOrderByWithAggregationInput = {
    idVenta?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    _count?: lineaVentaCountOrderByAggregateInput
    _avg?: lineaVentaAvgOrderByAggregateInput
    _max?: lineaVentaMaxOrderByAggregateInput
    _min?: lineaVentaMinOrderByAggregateInput
    _sum?: lineaVentaSumOrderByAggregateInput
  }

  export type lineaVentaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<lineaVentaScalarWhereWithAggregatesInput>
    OR?: Enumerable<lineaVentaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<lineaVentaScalarWhereWithAggregatesInput>
    idVenta?: IntWithAggregatesFilter | number
    linea?: IntWithAggregatesFilter | number
    idProducto?: IntWithAggregatesFilter | number
    cantidad?: IntWithAggregatesFilter | number
    precioUnitario?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type productoCreateInput = {
    nombre: string
    stock?: number
    precio: Decimal | DecimalJsLike | number | string
    categoria?: string | null
    fechaActualizacion?: Date | string | null
    lineasCompra?: lineaCompraCreateNestedManyWithoutProductoInput
    LineasVenta?: lineaVentaCreateNestedManyWithoutProductoInput
  }

  export type productoUncheckedCreateInput = {
    id?: number
    nombre: string
    stock?: number
    precio: Decimal | DecimalJsLike | number | string
    categoria?: string | null
    fechaActualizacion?: Date | string | null
    lineasCompra?: lineaCompraUncheckedCreateNestedManyWithoutProductoInput
    LineasVenta?: lineaVentaUncheckedCreateNestedManyWithoutProductoInput
  }

  export type productoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineasCompra?: lineaCompraUpdateManyWithoutProductoNestedInput
    LineasVenta?: lineaVentaUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineasCompra?: lineaCompraUncheckedUpdateManyWithoutProductoNestedInput
    LineasVenta?: lineaVentaUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type productoCreateManyInput = {
    id?: number
    nombre: string
    stock?: number
    precio: Decimal | DecimalJsLike | number | string
    categoria?: string | null
    fechaActualizacion?: Date | string | null
  }

  export type productoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type compraCreateInput = {
    fecha: Date | string
    proveedor?: string | null
    lineas?: lineaCompraCreateNestedManyWithoutCompraInput
  }

  export type compraUncheckedCreateInput = {
    id?: number
    fecha: Date | string
    proveedor?: string | null
    lineas?: lineaCompraUncheckedCreateNestedManyWithoutCompraInput
  }

  export type compraUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: NullableStringFieldUpdateOperationsInput | string | null
    lineas?: lineaCompraUpdateManyWithoutCompraNestedInput
  }

  export type compraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: NullableStringFieldUpdateOperationsInput | string | null
    lineas?: lineaCompraUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type compraCreateManyInput = {
    id?: number
    fecha: Date | string
    proveedor?: string | null
  }

  export type compraUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type compraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type lineaCompraCreateInput = {
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    compra: compraCreateNestedOneWithoutLineasInput
    producto: productoCreateNestedOneWithoutLineasCompraInput
  }

  export type lineaCompraUncheckedCreateInput = {
    idCompra: number
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraUpdateInput = {
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    compra?: compraUpdateOneRequiredWithoutLineasNestedInput
    producto?: productoUpdateOneRequiredWithoutLineasCompraNestedInput
  }

  export type lineaCompraUncheckedUpdateInput = {
    idCompra?: IntFieldUpdateOperationsInput | number
    linea?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraCreateManyInput = {
    idCompra: number
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraUpdateManyMutationInput = {
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraUncheckedUpdateManyInput = {
    idCompra?: IntFieldUpdateOperationsInput | number
    linea?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ventaCreateInput = {
    fecha: Date | string
    cliente?: string | null
    lineas?: lineaVentaCreateNestedManyWithoutVentaInput
  }

  export type ventaUncheckedCreateInput = {
    id?: number
    fecha: Date | string
    cliente?: string | null
    lineas?: lineaVentaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type ventaUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: NullableStringFieldUpdateOperationsInput | string | null
    lineas?: lineaVentaUpdateManyWithoutVentaNestedInput
  }

  export type ventaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: NullableStringFieldUpdateOperationsInput | string | null
    lineas?: lineaVentaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type ventaCreateManyInput = {
    id?: number
    fecha: Date | string
    cliente?: string | null
  }

  export type ventaUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ventaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type lineaVentaCreateInput = {
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    venta: ventaCreateNestedOneWithoutLineasInput
    producto: productoCreateNestedOneWithoutLineasVentaInput
  }

  export type lineaVentaUncheckedCreateInput = {
    idVenta: number
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaUpdateInput = {
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    venta?: ventaUpdateOneRequiredWithoutLineasNestedInput
    producto?: productoUpdateOneRequiredWithoutLineasVentaNestedInput
  }

  export type lineaVentaUncheckedUpdateInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    linea?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaCreateManyInput = {
    idVenta: number
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaUpdateManyMutationInput = {
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaUncheckedUpdateManyInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    linea?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type LineaCompraListRelationFilter = {
    every?: lineaCompraWhereInput
    some?: lineaCompraWhereInput
    none?: lineaCompraWhereInput
  }

  export type LineaVentaListRelationFilter = {
    every?: lineaVentaWhereInput
    some?: lineaVentaWhereInput
    none?: lineaVentaWhereInput
  }

  export type lineaCompraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type lineaVentaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
    categoria?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type productoAvgOrderByAggregateInput = {
    id?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
  }

  export type productoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
    categoria?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type productoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
    categoria?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type productoSumOrderByAggregateInput = {
    id?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type compraCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    proveedor?: SortOrder
  }

  export type compraAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type compraMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    proveedor?: SortOrder
  }

  export type compraMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    proveedor?: SortOrder
  }

  export type compraSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type CompraRelationFilter = {
    is?: compraWhereInput
    isNot?: compraWhereInput
  }

  export type ProductoRelationFilter = {
    is?: productoWhereInput
    isNot?: productoWhereInput
  }

  export type lineaCompraLineaIdCompraCompoundUniqueInput = {
    linea: number
    idCompra: number
  }

  export type lineaCompraCountOrderByAggregateInput = {
    idCompra?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type lineaCompraAvgOrderByAggregateInput = {
    idCompra?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type lineaCompraMaxOrderByAggregateInput = {
    idCompra?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type lineaCompraMinOrderByAggregateInput = {
    idCompra?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type lineaCompraSumOrderByAggregateInput = {
    idCompra?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type ventaCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    cliente?: SortOrder
  }

  export type ventaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ventaMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    cliente?: SortOrder
  }

  export type ventaMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    cliente?: SortOrder
  }

  export type ventaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VentaRelationFilter = {
    is?: ventaWhereInput
    isNot?: ventaWhereInput
  }

  export type lineaVentaLineaIdVentaCompoundUniqueInput = {
    linea: number
    idVenta: number
  }

  export type lineaVentaCountOrderByAggregateInput = {
    idVenta?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type lineaVentaAvgOrderByAggregateInput = {
    idVenta?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type lineaVentaMaxOrderByAggregateInput = {
    idVenta?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type lineaVentaMinOrderByAggregateInput = {
    idVenta?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type lineaVentaSumOrderByAggregateInput = {
    idVenta?: SortOrder
    linea?: SortOrder
    idProducto?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
  }

  export type lineaCompraCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<lineaCompraCreateWithoutProductoInput>, Enumerable<lineaCompraUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<lineaCompraCreateOrConnectWithoutProductoInput>
    createMany?: lineaCompraCreateManyProductoInputEnvelope
    connect?: Enumerable<lineaCompraWhereUniqueInput>
  }

  export type lineaVentaCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<lineaVentaCreateWithoutProductoInput>, Enumerable<lineaVentaUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<lineaVentaCreateOrConnectWithoutProductoInput>
    createMany?: lineaVentaCreateManyProductoInputEnvelope
    connect?: Enumerable<lineaVentaWhereUniqueInput>
  }

  export type lineaCompraUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<lineaCompraCreateWithoutProductoInput>, Enumerable<lineaCompraUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<lineaCompraCreateOrConnectWithoutProductoInput>
    createMany?: lineaCompraCreateManyProductoInputEnvelope
    connect?: Enumerable<lineaCompraWhereUniqueInput>
  }

  export type lineaVentaUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<lineaVentaCreateWithoutProductoInput>, Enumerable<lineaVentaUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<lineaVentaCreateOrConnectWithoutProductoInput>
    createMany?: lineaVentaCreateManyProductoInputEnvelope
    connect?: Enumerable<lineaVentaWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type lineaCompraUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<lineaCompraCreateWithoutProductoInput>, Enumerable<lineaCompraUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<lineaCompraCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<lineaCompraUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: lineaCompraCreateManyProductoInputEnvelope
    set?: Enumerable<lineaCompraWhereUniqueInput>
    disconnect?: Enumerable<lineaCompraWhereUniqueInput>
    delete?: Enumerable<lineaCompraWhereUniqueInput>
    connect?: Enumerable<lineaCompraWhereUniqueInput>
    update?: Enumerable<lineaCompraUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<lineaCompraUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<lineaCompraScalarWhereInput>
  }

  export type lineaVentaUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<lineaVentaCreateWithoutProductoInput>, Enumerable<lineaVentaUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<lineaVentaCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<lineaVentaUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: lineaVentaCreateManyProductoInputEnvelope
    set?: Enumerable<lineaVentaWhereUniqueInput>
    disconnect?: Enumerable<lineaVentaWhereUniqueInput>
    delete?: Enumerable<lineaVentaWhereUniqueInput>
    connect?: Enumerable<lineaVentaWhereUniqueInput>
    update?: Enumerable<lineaVentaUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<lineaVentaUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<lineaVentaScalarWhereInput>
  }

  export type lineaCompraUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<lineaCompraCreateWithoutProductoInput>, Enumerable<lineaCompraUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<lineaCompraCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<lineaCompraUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: lineaCompraCreateManyProductoInputEnvelope
    set?: Enumerable<lineaCompraWhereUniqueInput>
    disconnect?: Enumerable<lineaCompraWhereUniqueInput>
    delete?: Enumerable<lineaCompraWhereUniqueInput>
    connect?: Enumerable<lineaCompraWhereUniqueInput>
    update?: Enumerable<lineaCompraUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<lineaCompraUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<lineaCompraScalarWhereInput>
  }

  export type lineaVentaUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<lineaVentaCreateWithoutProductoInput>, Enumerable<lineaVentaUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<lineaVentaCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<lineaVentaUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: lineaVentaCreateManyProductoInputEnvelope
    set?: Enumerable<lineaVentaWhereUniqueInput>
    disconnect?: Enumerable<lineaVentaWhereUniqueInput>
    delete?: Enumerable<lineaVentaWhereUniqueInput>
    connect?: Enumerable<lineaVentaWhereUniqueInput>
    update?: Enumerable<lineaVentaUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<lineaVentaUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<lineaVentaScalarWhereInput>
  }

  export type lineaCompraCreateNestedManyWithoutCompraInput = {
    create?: XOR<Enumerable<lineaCompraCreateWithoutCompraInput>, Enumerable<lineaCompraUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<lineaCompraCreateOrConnectWithoutCompraInput>
    createMany?: lineaCompraCreateManyCompraInputEnvelope
    connect?: Enumerable<lineaCompraWhereUniqueInput>
  }

  export type lineaCompraUncheckedCreateNestedManyWithoutCompraInput = {
    create?: XOR<Enumerable<lineaCompraCreateWithoutCompraInput>, Enumerable<lineaCompraUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<lineaCompraCreateOrConnectWithoutCompraInput>
    createMany?: lineaCompraCreateManyCompraInputEnvelope
    connect?: Enumerable<lineaCompraWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type lineaCompraUpdateManyWithoutCompraNestedInput = {
    create?: XOR<Enumerable<lineaCompraCreateWithoutCompraInput>, Enumerable<lineaCompraUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<lineaCompraCreateOrConnectWithoutCompraInput>
    upsert?: Enumerable<lineaCompraUpsertWithWhereUniqueWithoutCompraInput>
    createMany?: lineaCompraCreateManyCompraInputEnvelope
    set?: Enumerable<lineaCompraWhereUniqueInput>
    disconnect?: Enumerable<lineaCompraWhereUniqueInput>
    delete?: Enumerable<lineaCompraWhereUniqueInput>
    connect?: Enumerable<lineaCompraWhereUniqueInput>
    update?: Enumerable<lineaCompraUpdateWithWhereUniqueWithoutCompraInput>
    updateMany?: Enumerable<lineaCompraUpdateManyWithWhereWithoutCompraInput>
    deleteMany?: Enumerable<lineaCompraScalarWhereInput>
  }

  export type lineaCompraUncheckedUpdateManyWithoutCompraNestedInput = {
    create?: XOR<Enumerable<lineaCompraCreateWithoutCompraInput>, Enumerable<lineaCompraUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<lineaCompraCreateOrConnectWithoutCompraInput>
    upsert?: Enumerable<lineaCompraUpsertWithWhereUniqueWithoutCompraInput>
    createMany?: lineaCompraCreateManyCompraInputEnvelope
    set?: Enumerable<lineaCompraWhereUniqueInput>
    disconnect?: Enumerable<lineaCompraWhereUniqueInput>
    delete?: Enumerable<lineaCompraWhereUniqueInput>
    connect?: Enumerable<lineaCompraWhereUniqueInput>
    update?: Enumerable<lineaCompraUpdateWithWhereUniqueWithoutCompraInput>
    updateMany?: Enumerable<lineaCompraUpdateManyWithWhereWithoutCompraInput>
    deleteMany?: Enumerable<lineaCompraScalarWhereInput>
  }

  export type compraCreateNestedOneWithoutLineasInput = {
    create?: XOR<compraCreateWithoutLineasInput, compraUncheckedCreateWithoutLineasInput>
    connectOrCreate?: compraCreateOrConnectWithoutLineasInput
    connect?: compraWhereUniqueInput
  }

  export type productoCreateNestedOneWithoutLineasCompraInput = {
    create?: XOR<productoCreateWithoutLineasCompraInput, productoUncheckedCreateWithoutLineasCompraInput>
    connectOrCreate?: productoCreateOrConnectWithoutLineasCompraInput
    connect?: productoWhereUniqueInput
  }

  export type compraUpdateOneRequiredWithoutLineasNestedInput = {
    create?: XOR<compraCreateWithoutLineasInput, compraUncheckedCreateWithoutLineasInput>
    connectOrCreate?: compraCreateOrConnectWithoutLineasInput
    upsert?: compraUpsertWithoutLineasInput
    connect?: compraWhereUniqueInput
    update?: XOR<compraUpdateWithoutLineasInput, compraUncheckedUpdateWithoutLineasInput>
  }

  export type productoUpdateOneRequiredWithoutLineasCompraNestedInput = {
    create?: XOR<productoCreateWithoutLineasCompraInput, productoUncheckedCreateWithoutLineasCompraInput>
    connectOrCreate?: productoCreateOrConnectWithoutLineasCompraInput
    upsert?: productoUpsertWithoutLineasCompraInput
    connect?: productoWhereUniqueInput
    update?: XOR<productoUpdateWithoutLineasCompraInput, productoUncheckedUpdateWithoutLineasCompraInput>
  }

  export type lineaVentaCreateNestedManyWithoutVentaInput = {
    create?: XOR<Enumerable<lineaVentaCreateWithoutVentaInput>, Enumerable<lineaVentaUncheckedCreateWithoutVentaInput>>
    connectOrCreate?: Enumerable<lineaVentaCreateOrConnectWithoutVentaInput>
    createMany?: lineaVentaCreateManyVentaInputEnvelope
    connect?: Enumerable<lineaVentaWhereUniqueInput>
  }

  export type lineaVentaUncheckedCreateNestedManyWithoutVentaInput = {
    create?: XOR<Enumerable<lineaVentaCreateWithoutVentaInput>, Enumerable<lineaVentaUncheckedCreateWithoutVentaInput>>
    connectOrCreate?: Enumerable<lineaVentaCreateOrConnectWithoutVentaInput>
    createMany?: lineaVentaCreateManyVentaInputEnvelope
    connect?: Enumerable<lineaVentaWhereUniqueInput>
  }

  export type lineaVentaUpdateManyWithoutVentaNestedInput = {
    create?: XOR<Enumerable<lineaVentaCreateWithoutVentaInput>, Enumerable<lineaVentaUncheckedCreateWithoutVentaInput>>
    connectOrCreate?: Enumerable<lineaVentaCreateOrConnectWithoutVentaInput>
    upsert?: Enumerable<lineaVentaUpsertWithWhereUniqueWithoutVentaInput>
    createMany?: lineaVentaCreateManyVentaInputEnvelope
    set?: Enumerable<lineaVentaWhereUniqueInput>
    disconnect?: Enumerable<lineaVentaWhereUniqueInput>
    delete?: Enumerable<lineaVentaWhereUniqueInput>
    connect?: Enumerable<lineaVentaWhereUniqueInput>
    update?: Enumerable<lineaVentaUpdateWithWhereUniqueWithoutVentaInput>
    updateMany?: Enumerable<lineaVentaUpdateManyWithWhereWithoutVentaInput>
    deleteMany?: Enumerable<lineaVentaScalarWhereInput>
  }

  export type lineaVentaUncheckedUpdateManyWithoutVentaNestedInput = {
    create?: XOR<Enumerable<lineaVentaCreateWithoutVentaInput>, Enumerable<lineaVentaUncheckedCreateWithoutVentaInput>>
    connectOrCreate?: Enumerable<lineaVentaCreateOrConnectWithoutVentaInput>
    upsert?: Enumerable<lineaVentaUpsertWithWhereUniqueWithoutVentaInput>
    createMany?: lineaVentaCreateManyVentaInputEnvelope
    set?: Enumerable<lineaVentaWhereUniqueInput>
    disconnect?: Enumerable<lineaVentaWhereUniqueInput>
    delete?: Enumerable<lineaVentaWhereUniqueInput>
    connect?: Enumerable<lineaVentaWhereUniqueInput>
    update?: Enumerable<lineaVentaUpdateWithWhereUniqueWithoutVentaInput>
    updateMany?: Enumerable<lineaVentaUpdateManyWithWhereWithoutVentaInput>
    deleteMany?: Enumerable<lineaVentaScalarWhereInput>
  }

  export type ventaCreateNestedOneWithoutLineasInput = {
    create?: XOR<ventaCreateWithoutLineasInput, ventaUncheckedCreateWithoutLineasInput>
    connectOrCreate?: ventaCreateOrConnectWithoutLineasInput
    connect?: ventaWhereUniqueInput
  }

  export type productoCreateNestedOneWithoutLineasVentaInput = {
    create?: XOR<productoCreateWithoutLineasVentaInput, productoUncheckedCreateWithoutLineasVentaInput>
    connectOrCreate?: productoCreateOrConnectWithoutLineasVentaInput
    connect?: productoWhereUniqueInput
  }

  export type ventaUpdateOneRequiredWithoutLineasNestedInput = {
    create?: XOR<ventaCreateWithoutLineasInput, ventaUncheckedCreateWithoutLineasInput>
    connectOrCreate?: ventaCreateOrConnectWithoutLineasInput
    upsert?: ventaUpsertWithoutLineasInput
    connect?: ventaWhereUniqueInput
    update?: XOR<ventaUpdateWithoutLineasInput, ventaUncheckedUpdateWithoutLineasInput>
  }

  export type productoUpdateOneRequiredWithoutLineasVentaNestedInput = {
    create?: XOR<productoCreateWithoutLineasVentaInput, productoUncheckedCreateWithoutLineasVentaInput>
    connectOrCreate?: productoCreateOrConnectWithoutLineasVentaInput
    upsert?: productoUpsertWithoutLineasVentaInput
    connect?: productoWhereUniqueInput
    update?: XOR<productoUpdateWithoutLineasVentaInput, productoUncheckedUpdateWithoutLineasVentaInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type lineaCompraCreateWithoutProductoInput = {
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    compra: compraCreateNestedOneWithoutLineasInput
  }

  export type lineaCompraUncheckedCreateWithoutProductoInput = {
    idCompra: number
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraCreateOrConnectWithoutProductoInput = {
    where: lineaCompraWhereUniqueInput
    create: XOR<lineaCompraCreateWithoutProductoInput, lineaCompraUncheckedCreateWithoutProductoInput>
  }

  export type lineaCompraCreateManyProductoInputEnvelope = {
    data: Enumerable<lineaCompraCreateManyProductoInput>
    skipDuplicates?: boolean
  }

  export type lineaVentaCreateWithoutProductoInput = {
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    venta: ventaCreateNestedOneWithoutLineasInput
  }

  export type lineaVentaUncheckedCreateWithoutProductoInput = {
    idVenta: number
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaCreateOrConnectWithoutProductoInput = {
    where: lineaVentaWhereUniqueInput
    create: XOR<lineaVentaCreateWithoutProductoInput, lineaVentaUncheckedCreateWithoutProductoInput>
  }

  export type lineaVentaCreateManyProductoInputEnvelope = {
    data: Enumerable<lineaVentaCreateManyProductoInput>
    skipDuplicates?: boolean
  }

  export type lineaCompraUpsertWithWhereUniqueWithoutProductoInput = {
    where: lineaCompraWhereUniqueInput
    update: XOR<lineaCompraUpdateWithoutProductoInput, lineaCompraUncheckedUpdateWithoutProductoInput>
    create: XOR<lineaCompraCreateWithoutProductoInput, lineaCompraUncheckedCreateWithoutProductoInput>
  }

  export type lineaCompraUpdateWithWhereUniqueWithoutProductoInput = {
    where: lineaCompraWhereUniqueInput
    data: XOR<lineaCompraUpdateWithoutProductoInput, lineaCompraUncheckedUpdateWithoutProductoInput>
  }

  export type lineaCompraUpdateManyWithWhereWithoutProductoInput = {
    where: lineaCompraScalarWhereInput
    data: XOR<lineaCompraUpdateManyMutationInput, lineaCompraUncheckedUpdateManyWithoutLineasCompraInput>
  }

  export type lineaCompraScalarWhereInput = {
    AND?: Enumerable<lineaCompraScalarWhereInput>
    OR?: Enumerable<lineaCompraScalarWhereInput>
    NOT?: Enumerable<lineaCompraScalarWhereInput>
    idCompra?: IntFilter | number
    linea?: IntFilter | number
    idProducto?: IntFilter | number
    cantidad?: IntFilter | number
    precioUnitario?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaUpsertWithWhereUniqueWithoutProductoInput = {
    where: lineaVentaWhereUniqueInput
    update: XOR<lineaVentaUpdateWithoutProductoInput, lineaVentaUncheckedUpdateWithoutProductoInput>
    create: XOR<lineaVentaCreateWithoutProductoInput, lineaVentaUncheckedCreateWithoutProductoInput>
  }

  export type lineaVentaUpdateWithWhereUniqueWithoutProductoInput = {
    where: lineaVentaWhereUniqueInput
    data: XOR<lineaVentaUpdateWithoutProductoInput, lineaVentaUncheckedUpdateWithoutProductoInput>
  }

  export type lineaVentaUpdateManyWithWhereWithoutProductoInput = {
    where: lineaVentaScalarWhereInput
    data: XOR<lineaVentaUpdateManyMutationInput, lineaVentaUncheckedUpdateManyWithoutLineasVentaInput>
  }

  export type lineaVentaScalarWhereInput = {
    AND?: Enumerable<lineaVentaScalarWhereInput>
    OR?: Enumerable<lineaVentaScalarWhereInput>
    NOT?: Enumerable<lineaVentaScalarWhereInput>
    idVenta?: IntFilter | number
    linea?: IntFilter | number
    idProducto?: IntFilter | number
    cantidad?: IntFilter | number
    precioUnitario?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraCreateWithoutCompraInput = {
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    producto: productoCreateNestedOneWithoutLineasCompraInput
  }

  export type lineaCompraUncheckedCreateWithoutCompraInput = {
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraCreateOrConnectWithoutCompraInput = {
    where: lineaCompraWhereUniqueInput
    create: XOR<lineaCompraCreateWithoutCompraInput, lineaCompraUncheckedCreateWithoutCompraInput>
  }

  export type lineaCompraCreateManyCompraInputEnvelope = {
    data: Enumerable<lineaCompraCreateManyCompraInput>
    skipDuplicates?: boolean
  }

  export type lineaCompraUpsertWithWhereUniqueWithoutCompraInput = {
    where: lineaCompraWhereUniqueInput
    update: XOR<lineaCompraUpdateWithoutCompraInput, lineaCompraUncheckedUpdateWithoutCompraInput>
    create: XOR<lineaCompraCreateWithoutCompraInput, lineaCompraUncheckedCreateWithoutCompraInput>
  }

  export type lineaCompraUpdateWithWhereUniqueWithoutCompraInput = {
    where: lineaCompraWhereUniqueInput
    data: XOR<lineaCompraUpdateWithoutCompraInput, lineaCompraUncheckedUpdateWithoutCompraInput>
  }

  export type lineaCompraUpdateManyWithWhereWithoutCompraInput = {
    where: lineaCompraScalarWhereInput
    data: XOR<lineaCompraUpdateManyMutationInput, lineaCompraUncheckedUpdateManyWithoutLineasInput>
  }

  export type compraCreateWithoutLineasInput = {
    fecha: Date | string
    proveedor?: string | null
  }

  export type compraUncheckedCreateWithoutLineasInput = {
    id?: number
    fecha: Date | string
    proveedor?: string | null
  }

  export type compraCreateOrConnectWithoutLineasInput = {
    where: compraWhereUniqueInput
    create: XOR<compraCreateWithoutLineasInput, compraUncheckedCreateWithoutLineasInput>
  }

  export type productoCreateWithoutLineasCompraInput = {
    nombre: string
    stock?: number
    precio: Decimal | DecimalJsLike | number | string
    categoria?: string | null
    fechaActualizacion?: Date | string | null
    LineasVenta?: lineaVentaCreateNestedManyWithoutProductoInput
  }

  export type productoUncheckedCreateWithoutLineasCompraInput = {
    id?: number
    nombre: string
    stock?: number
    precio: Decimal | DecimalJsLike | number | string
    categoria?: string | null
    fechaActualizacion?: Date | string | null
    LineasVenta?: lineaVentaUncheckedCreateNestedManyWithoutProductoInput
  }

  export type productoCreateOrConnectWithoutLineasCompraInput = {
    where: productoWhereUniqueInput
    create: XOR<productoCreateWithoutLineasCompraInput, productoUncheckedCreateWithoutLineasCompraInput>
  }

  export type compraUpsertWithoutLineasInput = {
    update: XOR<compraUpdateWithoutLineasInput, compraUncheckedUpdateWithoutLineasInput>
    create: XOR<compraCreateWithoutLineasInput, compraUncheckedCreateWithoutLineasInput>
  }

  export type compraUpdateWithoutLineasInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type compraUncheckedUpdateWithoutLineasInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    proveedor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productoUpsertWithoutLineasCompraInput = {
    update: XOR<productoUpdateWithoutLineasCompraInput, productoUncheckedUpdateWithoutLineasCompraInput>
    create: XOR<productoCreateWithoutLineasCompraInput, productoUncheckedCreateWithoutLineasCompraInput>
  }

  export type productoUpdateWithoutLineasCompraInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    LineasVenta?: lineaVentaUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateWithoutLineasCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    LineasVenta?: lineaVentaUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type lineaVentaCreateWithoutVentaInput = {
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
    producto: productoCreateNestedOneWithoutLineasVentaInput
  }

  export type lineaVentaUncheckedCreateWithoutVentaInput = {
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaCreateOrConnectWithoutVentaInput = {
    where: lineaVentaWhereUniqueInput
    create: XOR<lineaVentaCreateWithoutVentaInput, lineaVentaUncheckedCreateWithoutVentaInput>
  }

  export type lineaVentaCreateManyVentaInputEnvelope = {
    data: Enumerable<lineaVentaCreateManyVentaInput>
    skipDuplicates?: boolean
  }

  export type lineaVentaUpsertWithWhereUniqueWithoutVentaInput = {
    where: lineaVentaWhereUniqueInput
    update: XOR<lineaVentaUpdateWithoutVentaInput, lineaVentaUncheckedUpdateWithoutVentaInput>
    create: XOR<lineaVentaCreateWithoutVentaInput, lineaVentaUncheckedCreateWithoutVentaInput>
  }

  export type lineaVentaUpdateWithWhereUniqueWithoutVentaInput = {
    where: lineaVentaWhereUniqueInput
    data: XOR<lineaVentaUpdateWithoutVentaInput, lineaVentaUncheckedUpdateWithoutVentaInput>
  }

  export type lineaVentaUpdateManyWithWhereWithoutVentaInput = {
    where: lineaVentaScalarWhereInput
    data: XOR<lineaVentaUpdateManyMutationInput, lineaVentaUncheckedUpdateManyWithoutLineasInput>
  }

  export type ventaCreateWithoutLineasInput = {
    fecha: Date | string
    cliente?: string | null
  }

  export type ventaUncheckedCreateWithoutLineasInput = {
    id?: number
    fecha: Date | string
    cliente?: string | null
  }

  export type ventaCreateOrConnectWithoutLineasInput = {
    where: ventaWhereUniqueInput
    create: XOR<ventaCreateWithoutLineasInput, ventaUncheckedCreateWithoutLineasInput>
  }

  export type productoCreateWithoutLineasVentaInput = {
    nombre: string
    stock?: number
    precio: Decimal | DecimalJsLike | number | string
    categoria?: string | null
    fechaActualizacion?: Date | string | null
    lineasCompra?: lineaCompraCreateNestedManyWithoutProductoInput
  }

  export type productoUncheckedCreateWithoutLineasVentaInput = {
    id?: number
    nombre: string
    stock?: number
    precio: Decimal | DecimalJsLike | number | string
    categoria?: string | null
    fechaActualizacion?: Date | string | null
    lineasCompra?: lineaCompraUncheckedCreateNestedManyWithoutProductoInput
  }

  export type productoCreateOrConnectWithoutLineasVentaInput = {
    where: productoWhereUniqueInput
    create: XOR<productoCreateWithoutLineasVentaInput, productoUncheckedCreateWithoutLineasVentaInput>
  }

  export type ventaUpsertWithoutLineasInput = {
    update: XOR<ventaUpdateWithoutLineasInput, ventaUncheckedUpdateWithoutLineasInput>
    create: XOR<ventaCreateWithoutLineasInput, ventaUncheckedCreateWithoutLineasInput>
  }

  export type ventaUpdateWithoutLineasInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ventaUncheckedUpdateWithoutLineasInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productoUpsertWithoutLineasVentaInput = {
    update: XOR<productoUpdateWithoutLineasVentaInput, productoUncheckedUpdateWithoutLineasVentaInput>
    create: XOR<productoCreateWithoutLineasVentaInput, productoUncheckedCreateWithoutLineasVentaInput>
  }

  export type productoUpdateWithoutLineasVentaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineasCompra?: lineaCompraUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateWithoutLineasVentaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    fechaActualizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineasCompra?: lineaCompraUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type lineaCompraCreateManyProductoInput = {
    idCompra: number
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaCreateManyProductoInput = {
    idVenta: number
    linea: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraUpdateWithoutProductoInput = {
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    compra?: compraUpdateOneRequiredWithoutLineasNestedInput
  }

  export type lineaCompraUncheckedUpdateWithoutProductoInput = {
    idCompra?: IntFieldUpdateOperationsInput | number
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraUncheckedUpdateManyWithoutLineasCompraInput = {
    idCompra?: IntFieldUpdateOperationsInput | number
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaUpdateWithoutProductoInput = {
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    venta?: ventaUpdateOneRequiredWithoutLineasNestedInput
  }

  export type lineaVentaUncheckedUpdateWithoutProductoInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaUncheckedUpdateManyWithoutLineasVentaInput = {
    idVenta?: IntFieldUpdateOperationsInput | number
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraCreateManyCompraInput = {
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraUpdateWithoutCompraInput = {
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    producto?: productoUpdateOneRequiredWithoutLineasCompraNestedInput
  }

  export type lineaCompraUncheckedUpdateWithoutCompraInput = {
    linea?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaCompraUncheckedUpdateManyWithoutLineasInput = {
    linea?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaCreateManyVentaInput = {
    linea: number
    idProducto: number
    cantidad: number
    precioUnitario: Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaUpdateWithoutVentaInput = {
    linea?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    producto?: productoUpdateOneRequiredWithoutLineasVentaNestedInput
  }

  export type lineaVentaUncheckedUpdateWithoutVentaInput = {
    linea?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type lineaVentaUncheckedUpdateManyWithoutLineasInput = {
    linea?: IntFieldUpdateOperationsInput | number
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}